// FarmAssist AI - Main JavaScript File

// Advanced Fertilizer Recommendations functions
async function getAdvancedFertilizerRecommendations() {
  const cropType = document.getElementById('fertCropType').value;
  const soilType = document.getElementById('fertSoilType').value;
  const growthStage = document.getElementById('fertGrowthStage').value;
  const fieldSize = document.getElementById('fertFieldSize').value;
  
  if (!cropType || !soilType) {
    alert('Please select both crop type and soil type');
    return;
  }
  
  // Show loading spinner
  document.getElementById('fertilizerResults').classList.remove('hidden');
  document.getElementById('fertilizerSpinner').style.display = 'block';
  document.getElementById('fertilizerRecommendationsContent').innerHTML = '';
  
  try {
    // Get soil test values
    const nitrogenLevel = document.getElementById('fertNitrogen').value;
    const phosphorusLevel = document.getElementById('fertPhosphorus').value;
    const potassiumLevel = document.getElementById('fertPotassium').value;
    const phLevel = document.getElementById('fertPH').value;
    const organicMatter = document.getElementById('fertOrganicMatter').value;
    
    const data = {
      crop_type: cropType,
      soil_type: soilType,
      growth_stage: growthStage,
      field_size: parseFloat(fieldSize),
      soil_test: {
        nitrogen: nitrogenLevel,
        phosphorus: phosphorusLevel,
        potassium: potassiumLevel,
        ph: parseFloat(phLevel),
        organic_matter: organicMatter
      }
    };
    
    console.log('Sending fertilizer recommendation request:', data);
    
    // Call the API
    const response = await fetchAPI('advanced_fertilizer_recommendations', 'POST', data);
    
    console.log('Fertilizer recommendations response:', response);
    
    // Hide spinner
    document.getElementById('fertilizerSpinner').style.display = 'none';
    
    // Display results
    if (response && response.fertilizer_recommendations) {
      const recommendations = response.fertilizer_recommendations;
      let html = `
        <h4 class="mb-3">Fertilizer Recommendations for ${cropType} in ${soilType} Soil</h4>
        <p class="text-muted mb-4">Generated by: ${response.generated_by || 'AI Expert'}</p>
      `;
      
      // Primary recommendations
      if (recommendations.primary_recommendations && recommendations.primary_recommendations.length > 0) {
        html += `<h5 class="mt-3">Primary Fertilizer Recommendations</h5>
                <div class="table-responsive">
                  <table class="table table-striped">
                    <thead>
                      <tr>
                        <th>Product/Type</th>
                        <th>NPK Ratio</th>
                        <th>Application Rate</th>
                        <th>Timing</th>
                        <th>Method</th>
                      </tr>
                    </thead>
                    <tbody>`;
        
        recommendations.primary_recommendations.forEach(rec => {
          html += `
            <tr>
              <td>${rec.product || '-'}</td>
              <td>${rec.ratio || '-'}</td>
              <td>${rec.rate || '-'}</td>
              <td>${rec.timing || '-'}</td>
              <td>${rec.method || '-'}</td>
            </tr>
          `;
        });
        
        html += `</tbody></table></div>`;
      }
      
      // Secondary nutrients
      if (recommendations.secondary_nutrients && recommendations.secondary_nutrients.length > 0) {
        html += `<h5 class="mt-4">Secondary Nutrients</h5><ul class="list-group mb-3">`;
        recommendations.secondary_nutrients.forEach(item => {
          html += `<li class="list-group-item">${item}</li>`;
        });
        html += `</ul>`;
      }
      
      // Micronutrients
      if (recommendations.micronutrients && recommendations.micronutrients.length > 0) {
        html += `<h5 class="mt-4">Micronutrients</h5><ul class="list-group mb-3">`;
        recommendations.micronutrients.forEach(item => {
          html += `<li class="list-group-item">${item}</li>`;
        });
        html += `</ul>`;
      }
      
      // Organic alternatives
      if (recommendations.organic_alternatives && recommendations.organic_alternatives.length > 0) {
        html += `<h5 class="mt-4">Organic Alternatives</h5><ul class="list-group mb-3">`;
        if (typeof recommendations.organic_alternatives[0] === 'object') {
          recommendations.organic_alternatives.forEach(item => {
            html += `<li class="list-group-item">
              <strong>${item.product || 'Organic fertilizer'}</strong>: 
              ${item.rate || ''} - 
              ${item.timing || ''} - 
              ${item.method || ''}
            </li>`;
          });
        } else {
          recommendations.organic_alternatives.forEach(item => {
            html += `<li class="list-group-item">${item}</li>`;
          });
        }
        html += `</ul>`;
      }
      
      // Soil-specific notes
      if (recommendations.soil_specific_notes) {
        html += `<h5 class="mt-4">Soil-Specific Notes</h5>
               <div class="alert alert-info">${recommendations.soil_specific_notes}</div>`;
      }
      
      // Growth stage notes
      if (recommendations.growth_stage_notes) {
        html += `<h5 class="mt-4">Growth Stage Notes</h5>
               <div class="alert alert-info">${recommendations.growth_stage_notes}</div>`;
      }
      
      // pH management
      if (recommendations.ph_management) {
        html += `<h5 class="mt-4">pH Management</h5>
               <div class="alert alert-warning">${recommendations.ph_management}</div>`;
      }
      
      // Application schedule
      if (recommendations.application_schedule && recommendations.application_schedule.length > 0) {
        html += `<h5 class="mt-4">Application Schedule</h5><ul class="list-group mb-3">`;
        recommendations.application_schedule.forEach(item => {
          html += `<li class="list-group-item">${item}</li>`;
        });
        html += `</ul>`;
      }
      
      // Expected benefits
      if (recommendations.expected_benefits && recommendations.expected_benefits.length > 0) {
        html += `<h5 class="mt-4">Expected Benefits</h5><ul class="list-group mb-3">`;
        recommendations.expected_benefits.forEach(item => {
          html += `<li class="list-group-item">${item}</li>`;
        });
        html += `</ul>`;
      }
      
      // Precautions
      if (recommendations.precautions && recommendations.precautions.length > 0) {
        html += `<h5 class="mt-4">Precautions</h5><ul class="list-group mb-3">`;
        recommendations.precautions.forEach(item => {
          html += `<li class="list-group-item">${item}</li>`;
        });
        html += `</ul>`;
      }
      
      // Cost estimate
      if (recommendations.cost_estimate) {
        html += `<h5 class="mt-4">Estimated Cost</h5>
               <div class="alert alert-primary">â‚¹${recommendations.cost_estimate} per hectare (approximately)</div>`;
      }
      
      // Add print button
      html += `<div class="mt-4 text-center">
                <button class="btn btn-outline-success" onclick="window.print()">
                  <i class="fas fa-print me-2"></i>Print Recommendations
                </button>
              </div>`;
      
      document.getElementById('fertilizerRecommendationsContent').innerHTML = html;
    } else {
      document.getElementById('fertilizerRecommendationsContent').innerHTML = `
        <div class="alert alert-danger">
          Failed to generate fertilizer recommendations. Please try again.
        </div>
      `;
    }
  } catch (error) {
    console.error('Error generating fertilizer recommendations:', error);
    document.getElementById('fertilizerSpinner').style.display = 'none';
    document.getElementById('fertilizerRecommendationsContent').innerHTML = `
      <div class="alert alert-danger">
        Error: ${error.message || 'Failed to generate recommendations'}
      </div>
    `;
  }
}

// Irrigation Recommendations functions
async function getIrrigationRecommendations() {
  const cropType = document.getElementById('irrCropType').value;
  const soilType = document.getElementById('irrSoilType').value;
  const growthStage = document.getElementById('irrGrowthStage').value;
  const soilMoisture = document.getElementById('irrSoilMoisture').value;
  const irrigationSystem = document.getElementById('irrSystem').value;
  
  if (!cropType || !soilType) {
    alert('Please select both crop type and soil type');
    return;
  }
  
  // Show loading spinner
  document.getElementById('irrigationResults').classList.remove('hidden');
  document.getElementById('irrigationSpinner').style.display = 'block';
  document.getElementById('irrigationRecommendationsContent').innerHTML = '';
  
  try {
    // Get weather data values
    const temperature = document.getElementById('irrTemperature').value;
    const humidity = document.getElementById('irrHumidity').value;
    
    const data = {
      crop_type: cropType,
      soil_type: soilType,
      growth_stage: growthStage,
      soil_moisture: soilMoisture,
      irrigation_system: irrigationSystem,
      weather_data: {
        temperature: parseFloat(temperature),
        humidity: parseFloat(humidity),
        precipitation_forecast: [0, 0, 0, 0, 0] // Default to no rain forecast
      }
    };
    
    console.log('Sending irrigation recommendation request:', data);
    
    // Call the API
    const response = await fetchAPI('irrigation_recommendations', 'POST', data);
    
    console.log('Irrigation recommendations response:', response);
    
    // Hide spinner
    document.getElementById('irrigationSpinner').style.display = 'none';
    
    // Display results
    if (response && response.irrigation_recommendations) {
      const recommendations = response.irrigation_recommendations;
      let html = `
        <h4 class="mb-3">Irrigation Recommendations for ${cropType} in ${soilType} Soil</h4>
        <p class="text-muted mb-4">Generated by: ${response.generated_by || 'AI Expert'}</p>
      `;
      
      // Water requirements
      if (recommendations.water_requirement) {
        html += `<div class="alert alert-primary">
                  <strong>Daily Water Requirement:</strong> ${recommendations.water_requirement}
                </div>`;
      }
      
      // Irrigation frequency
      if (recommendations.frequency) {
        html += `<div class="alert alert-info">
                  <strong>Recommended Frequency:</strong> ${recommendations.frequency}
                </div>`;
      }
      
      // Best time
      if (recommendations.best_time) {
        html += `<div class="alert alert-success">
                  <strong>Best Time to Irrigate:</strong> ${recommendations.best_time}
                </div>`;
      }
      
      // Weather adjustments
      if (recommendations.weather_adjustments) {
        html += `<h5 class="mt-4">Weather-Based Adjustments</h5>
                <div class="alert alert-warning">${recommendations.weather_adjustments}</div>`;
      }
      
      // Water conservation techniques
      if (recommendations.conservation_techniques && recommendations.conservation_techniques.length > 0) {
        html += `<h5 class="mt-4">Water Conservation Techniques</h5><ul class="list-group mb-3">`;
        recommendations.conservation_techniques.forEach(item => {
          html += `<li class="list-group-item">${item}</li>`;
        });
        html += `</ul>`;
      }
      
      // Monitoring indicators
      if (recommendations.monitoring_indicators && recommendations.monitoring_indicators.length > 0) {
        html += `<h5 class="mt-4">Signs to Monitor</h5><ul class="list-group mb-3">`;
        recommendations.monitoring_indicators.forEach(item => {
          html += `<li class="list-group-item">${item}</li>`;
        });
        html += `</ul>`;
      }
      
      // Irrigation schedule
      if (recommendations.irrigation_schedule && recommendations.irrigation_schedule.length > 0) {
        html += `<h5 class="mt-4">7-Day Irrigation Schedule</h5>
                <div class="table-responsive">
                <table class="table table-striped">
                  <thead>
                    <tr>
                      <th>Day</th>
                      <th>Irrigate</th>
                      <th>Amount</th>
                      <th>Volume</th>
                      <th>Notes</th>
                    </tr>
                  </thead>
                  <tbody>`;
        
        recommendations.irrigation_schedule.forEach(day => {
          html += `
            <tr>
              <td>Day ${day.day}</td>
              <td>${day.irrigate ? '<span class="badge bg-success">Yes</span>' : '<span class="badge bg-secondary">No</span>'}</td>
              <td>${day.amount || '-'}</td>
              <td>${day.volume || '-'}</td>
              <td>${day.note || '-'}</td>
            </tr>
          `;
        });
        
        html += `</tbody></table></div>`;
      }
      
      // Expected benefits
      if (recommendations.expected_benefits) {
        html += `<h5 class="mt-4">Expected Benefits</h5>
                <div class="alert alert-success">${recommendations.expected_benefits}</div>`;
      }
      
      // Notes
      if (recommendations.notes && recommendations.notes.length > 0) {
        html += `<h5 class="mt-4">Additional Notes</h5><ul class="list-group mb-3">`;
        recommendations.notes.forEach(item => {
          html += `<li class="list-group-item">${item}</li>`;
        });
        html += `</ul>`;
      }
      
      // Add print button
      html += `<div class="mt-4 text-center">
                <button class="btn btn-outline-primary" onclick="window.print()">
                  <i class="fas fa-print me-2"></i>Print Schedule
                </button>
              </div>`;
      
      document.getElementById('irrigationRecommendationsContent').innerHTML = html;
    } else {
      document.getElementById('irrigationRecommendationsContent').innerHTML = `
        <div class="alert alert-danger">
          Failed to generate irrigation recommendations. Please try again.
        </div>
      `;
    }
  } catch (error) {
    console.error('Error generating irrigation recommendations:', error);
    document.getElementById('irrigationSpinner').style.display = 'none';
    document.getElementById('irrigationRecommendationsContent').innerHTML = `
      <div class="alert alert-danger">
        Error: ${error.message || 'Failed to generate recommendations'}
      </div>
    `;
  }
}

// AI Farm Guidance functions
async function getQuickFarmGuidance(cropType, soilType) {
  if (!cropType || !soilType) {
    return {
      error: 'Please select both crop type and soil type'
    };
  }

  const guidanceResults = document.getElementById('guidanceResults');
  guidanceResults.innerHTML = `
    <div class="text-center py-5">
      <div class="spinner-border text-success" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-3">Generating AI farming recommendations...</p>
    </div>
  `;

  try {
    // Use the farm guidance API with a special parameter for quick guidance
    const response = await fetchAPI('guidance/quick', 'POST', {
      crop_type: cropType,
      soil_type: soilType
    });

    console.log('Quick guidance response:', response);
    
    if (response && response.guidance) {
      displayQuickGuidance(response);
    } else {
      throw new Error('Invalid response from guidance API');
    }
  } catch (error) {
    console.error('Error getting farm guidance:', error);
    guidanceResults.innerHTML = `
      <div class="alert alert-danger">
        <i class="fas fa-exclamation-triangle me-2"></i>
        Failed to get farm guidance: ${error.message || 'Connection error'}
        <button class="btn btn-sm btn-outline-danger mt-2" onclick="location.reload()">Try Again</button>
      </div>
    `;
  }
}

function displayQuickGuidance(data) {
  const guidanceResults = document.getElementById('guidanceResults');
  const { crop_type, soil_type, guidance } = data;
  
  // Format the guidance data
  let html = `
    <div class="guidance-header mb-3">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="text-success mb-2">
          <i class="fas fa-check-circle me-2"></i>AI Farm Guidance
        </h5>
        <div class="guidance-actions">
          <button class="btn btn-sm btn-outline-primary" onclick="printGuidance()">
            <i class="fas fa-print me-1"></i> Print
          </button>
          <button class="btn btn-sm btn-outline-secondary ms-2" onclick="downloadGuidance()">
            <i class="fas fa-download me-1"></i> Download
          </button>
          <button class="btn btn-sm btn-outline-success ms-2" onclick="saveGuidanceToDashboard('${crop_type}', '${soil_type}')">
            <i class="fas fa-save me-1"></i> Save to Dashboard
          </button>
        </div>
      </div>
      <p class="mb-0"><strong>Crop:</strong> ${crop_type} | <strong>Soil:</strong> ${soil_type}</p>
      <hr>
    </div>
  `;
  
  // Key recommendations
  if (guidance) {
    // Add tabs for different sections including detailed article
    html += `
      <ul class="nav nav-tabs nav-fill mb-3" id="guidanceTabs" role="tablist">
        <li class="nav-item" role="presentation">
          <button class="nav-link ${guidance.detailed_article ? '' : 'active'}" id="general-tab" data-bs-toggle="tab" 
            data-bs-target="#general-content" type="button" role="tab" aria-selected="${guidance.detailed_article ? 'false' : 'true'}">
            General
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="crop-tab" data-bs-toggle="tab" 
            data-bs-target="#crop-content" type="button" role="tab" aria-selected="false">
            Crop Care
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="fert-tab" data-bs-toggle="tab" 
            data-bs-target="#fert-content" type="button" role="tab" aria-selected="false">
            Fertilizer
          </button>
        </li>
        ${guidance.detailed_article ? `
        <li class="nav-item" role="presentation">
          <button class="nav-link active" id="article-tab" data-bs-toggle="tab" 
            data-bs-target="#article-content" type="button" role="tab" aria-selected="true">
            Detailed Guide
          </button>
        </li>
        ` : ''}
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="pest-tab" data-bs-toggle="tab" 
            data-bs-target="#pest-content" type="button" role="tab" aria-selected="false">
            Pest Control
          </button>
        </li>
      </ul>
      
      <div class="tab-content" id="guidanceTabContent">
        <!-- General Recommendations -->
        <div class="tab-pane fade ${guidance.detailed_article ? '' : 'show active'}" id="general-content" role="tabpanel">
          <ul class="list-group list-group-flush">
            ${guidance.general_recommendations ? 
              guidance.general_recommendations.map(item => 
                `<li class="list-group-item">
                  <i class="fas fa-check-circle text-success me-2"></i>${item}
                </li>`
              ).join('') : 
              '<li class="list-group-item">No general recommendations available</li>'
            }
          </ul>
        </div>
        
        <!-- Crop Specific -->
        <div class="tab-pane fade" id="crop-content" role="tabpanel">
          <ul class="list-group list-group-flush">
            ${guidance.crop_specific ? 
              guidance.crop_specific.map(item => 
                `<li class="list-group-item">
                  <i class="fas fa-leaf text-success me-2"></i>${item}
                </li>`
              ).join('') : 
              '<li class="list-group-item">No crop-specific recommendations available</li>'
            }
          </ul>
        </div>
        
        <!-- Fertilizer Recommendations -->
        <div class="tab-pane fade" id="fert-content" role="tabpanel">
          <ul class="list-group list-group-flush">
            ${guidance.fertilizer ? 
              guidance.fertilizer.map(item => 
                `<li class="list-group-item">
                  <i class="fas fa-flask text-success me-2"></i>${item}
                </li>`
              ).join('') : 
              '<li class="list-group-item">No fertilizer recommendations available</li>'
            }
          </ul>
        </div>
        
        <!-- Pest Management -->
        <div class="tab-pane fade" id="pest-content" role="tabpanel">
          <ul class="list-group list-group-flush">
            ${guidance.pest_management ? 
              guidance.pest_management.map(item => 
                `<li class="list-group-item">
                  <i class="fas fa-bug text-danger me-2"></i>${item}
                </li>`
              ).join('') : 
              '<li class="list-group-item">No pest management recommendations available</li>'
            }
          </ul>
        </div>
        
        ${guidance.detailed_article ? `
        <!-- Detailed Article -->
        <div class="tab-pane fade show active" id="article-content" role="tabpanel">
          <div class="detailed-guide">
            <div class="d-flex justify-content-between align-items-center mb-3">
              <h5 class="mb-0">Comprehensive Growing Guide</h5>
              <button class="btn btn-sm btn-success" onclick="printArticle('${crop_type}', '${soil_type}')">
                <i class="fas fa-print me-2"></i>Print Guide
              </button>
            </div>
            <div class="article-content">
              ${formatArticleContent(guidance.detailed_article)}
            </div>
          </div>
        </div>
        ` : ''}
      </div>
    `;
  } else {
    html += `<div class="alert alert-warning">No guidance data available for this combination.</div>`;
  }
  
  // Add a register button for non-logged-in users
  if (!isLoggedIn()) {
    html += `
      <div class="mt-3 p-3 bg-light rounded">
        <p class="mb-2"><strong>Want more detailed guidance?</strong></p>
        <p class="small mb-2">Register to add specific fields, track health conditions, and get more personalized recommendations.</p>
        <button class="btn btn-sm btn-success" id="guidanceRegisterBtn">
          <i class="fas fa-user-plus me-2"></i>Register Now
        </button>
      </div>
    `;
  }
  
  guidanceResults.innerHTML = html;
  
  // Add click event for the register button
  const registerBtn = document.getElementById('guidanceRegisterBtn');
  if (registerBtn) {
    registerBtn.addEventListener('click', () => showSection('registerSection'));
  }
}

// Utility functions
function showSection(sectionId) {
  // Check if user is logged in - only allow access to login/register section if not logged in
  if (!isLoggedIn() && sectionId !== 'loginSection' && sectionId !== 'registerSection') {
    // If trying to access any other section, show login instead
    alert('Please login to access this feature');
    sectionId = 'loginSection';
    
    // Remember the section the user was trying to access
    sessionStorage.setItem('redirectAfterLogin', sectionId);
    return;
  }
  
  // Hide all sections
  document.querySelectorAll('main section').forEach(section => {
    section.classList.add('hidden');
  });
  
  // Show the requested section
  const section = document.getElementById(sectionId);
  if (section) {
    section.classList.remove('hidden');
  }
  
  // If we're in the dashboard section, check for free trial or subscription status
  if (sectionId === 'dashboardSection' && isLoggedIn()) {
    checkSubscriptionStatus();
  }
}

function showError(elementId, message) {
  const errorElement = document.getElementById(elementId);
  errorElement.textContent = message;
  errorElement.classList.remove('hidden');
  
  // Auto-hide after 5 seconds
  setTimeout(() => {
    errorElement.classList.add('hidden');
  }, 5000);
}

// API functions
async function fetchAPI(endpoint, method = 'GET', data = null, retries = 3) {
  const url = `/api/${endpoint}`;
  const options = {
    method: method,
    headers: {
      'Content-Type': 'application/json'
    }
  };
  
  if (data && (method === 'POST' || method === 'PUT')) {
    options.body = JSON.stringify(data);
  }
  
  try {
    console.log(`Sending ${method} request to ${url}`, data);
    const response = await fetch(url, options);
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || `API request failed with status ${response.status}`);
    }
    const responseData = await response.json();
    console.log(`Response from ${url}:`, responseData);
    return responseData;
  } catch (error) {
    console.error(`API Error (${endpoint}):`, error);
    
    // Implement retry logic for GET requests or when we have network errors
    if (retries > 0 && (method === 'GET' || error.message.includes('Failed to fetch'))) {
      console.log(`Retrying ${endpoint} (${retries} attempts left)...`);
      // Wait for a short time before retrying (exponential backoff)
      const delay = (3 - retries + 1) * 1000;
      await new Promise(resolve => setTimeout(resolve, delay));
      return fetchAPI(endpoint, method, data, retries - 1);
    }
    
    throw error;
  }
}

// Authentication functions
function isLoggedIn() {
  return localStorage.getItem('user_id') !== null;
}

function getCurrentUserId() {
  return localStorage.getItem('user_id');
}

function login(userId, username) {
  localStorage.setItem('user_id', userId);
  localStorage.setItem('username', username);
  updateAuthUI();
}

function logout() {
  localStorage.removeItem('user_id');
  localStorage.removeItem('username');
  updateAuthUI();
  showSection('loginSection');
}

function updateAuthUI() {
  const isAuthenticated = isLoggedIn();
  
  // Update navbar
  document.getElementById('loginNav').classList.toggle('hidden', isAuthenticated);
  document.getElementById('registerNav').classList.toggle('hidden', isAuthenticated);
  document.getElementById('logoutBtn').classList.toggle('hidden', !isAuthenticated);
  
  // Enable/disable protected sections
  document.getElementById('dashboardNav').classList.toggle('disabled', !isAuthenticated);
  
  // If user is authenticated, check subscription status
  if (isAuthenticated) {
    checkSubscriptionStatus();
  }
}

// Subscription-related functions
function checkSubscriptionStatus() {
  const userId = getCurrentUserId();
  if (!userId) return;
  
  // Get subscription data from localStorage or fetch from server
  const subscriptionData = getSubscriptionData();
  
  if (!subscriptionData) {
    // New user - set up free trial
    setupFreeTrial();
    return;
  }
  
  // Check if subscription is active
  if (subscriptionData.status === 'active') {
    // Subscription is active - do nothing
    console.log('Subscription active until:', new Date(subscriptionData.expiryDate));
    return;
  }
  
  // Check if free trial is still valid
  if (subscriptionData.status === 'trial') {
    const trialEnd = new Date(subscriptionData.trialEndDate);
    const now = new Date();
    
    if (trialEnd > now) {
      // Trial still valid - show days remaining
      const daysRemaining = Math.ceil((trialEnd - now) / (1000 * 60 * 60 * 24));
      console.log('Trial active, days remaining:', daysRemaining);
      showTrialBanner(daysRemaining);
    } else {
      // Trial expired - show subscription needed
      console.log('Trial expired, subscription needed');
      showSubscriptionNeededBanner();
    }
    return;
  }
  
  // If we get here, subscription is expired
  showSubscriptionNeededBanner();
}

function getSubscriptionData() {
  // Get subscription data from localStorage
  const subscriptionData = localStorage.getItem('subscription_data');
  if (subscriptionData) {
    return JSON.parse(subscriptionData);
  }
  
  // If no data in localStorage, return null
  return null;
}

function setupFreeTrial() {
  // Set up a 7-day free trial
  const now = new Date();
  const trialEndDate = new Date(now);
  trialEndDate.setDate(now.getDate() + 7); // 7 days from now
  
  // Save trial info to localStorage
  const subscriptionData = {
    status: 'trial',
    startDate: now.toISOString(),
    trialEndDate: trialEndDate.toISOString()
  };
  
  localStorage.setItem('subscription_data', JSON.stringify(subscriptionData));
  
  // Show trial welcome message
  showTrialWelcomeBanner();
}

function showTrialBanner(daysRemaining) {
  // Check if banner container exists, otherwise create it
  let bannerContainer = document.getElementById('subscription-banner');
  if (!bannerContainer) {
    bannerContainer = document.createElement('div');
    bannerContainer.id = 'subscription-banner';
    bannerContainer.className = 'alert alert-info alert-dismissible fade show subscription-banner';
    document.body.insertBefore(bannerContainer, document.body.firstChild);
  }
  
  // Set banner content for trial
  bannerContainer.innerHTML = `
    <strong>Free Trial:</strong> ${daysRemaining} day${daysRemaining !== 1 ? 's' : ''} remaining in your trial. 
    <a href="#" class="subscribe-link">Subscribe now</a> for uninterrupted access at just â‚¹99/year.
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  `;
  
  // Add event listener to subscribe link
  document.querySelector('.subscribe-link')?.addEventListener('click', (e) => {
    e.preventDefault();
    showSubscriptionModal();
  });
}

function showTrialWelcomeBanner() {
  // Check if banner container exists, otherwise create it
  let bannerContainer = document.getElementById('subscription-banner');
  if (!bannerContainer) {
    bannerContainer = document.createElement('div');
    bannerContainer.id = 'subscription-banner';
    bannerContainer.className = 'alert alert-success alert-dismissible fade show subscription-banner';
    document.body.insertBefore(bannerContainer, document.body.firstChild);
  }
  
  // Set banner content for trial welcome
  bannerContainer.innerHTML = `
    <strong>Welcome to FarmAssist AI!</strong> Your 7-day free trial has started. Enjoy full access to all features. 
    <a href="#" class="subscribe-link">Subscribe now</a> for just â‚¹99/year after your trial.
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  `;
  
  // Add event listener to subscribe link
  document.querySelector('.subscribe-link')?.addEventListener('click', (e) => {
    e.preventDefault();
    showSubscriptionModal();
  });
}

function showSubscriptionNeededBanner() {
  // Check if banner container exists, otherwise create it
  let bannerContainer = document.getElementById('subscription-banner');
  if (!bannerContainer) {
    bannerContainer = document.createElement('div');
    bannerContainer.id = 'subscription-banner';
    bannerContainer.className = 'alert alert-warning alert-dismissible fade show subscription-banner';
    document.body.insertBefore(bannerContainer, document.body.firstChild);
  }
  
  // Set banner content for subscription needed
  bannerContainer.innerHTML = `
    <strong>Subscription Required:</strong> Your free trial has ended. 
    <a href="#" class="subscribe-link">Subscribe now</a> for just â‚¹99/year to continue using all features.
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  `;
  
  // Add event listener to subscribe link
  document.querySelector('.subscribe-link')?.addEventListener('click', (e) => {
    e.preventDefault();
    showSubscriptionModal();
  });
}

function showSubscriptionModal() {
  // Create modal if it doesn't exist
  let modal = document.getElementById('subscriptionModal');
  if (!modal) {
    modal = document.createElement('div');
    modal.id = 'subscriptionModal';
    modal.className = 'modal fade';
    modal.tabIndex = '-1';
    modal.setAttribute('aria-labelledby', 'subscriptionModalLabel');
    modal.setAttribute('aria-hidden', 'true');
    
    modal.innerHTML = `
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="subscriptionModalLabel">Subscribe to FarmAssist AI</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="subscription-details mb-4">
              <h4>Premium Subscription</h4>
              <div class="price-tag my-3">
                <span class="currency">â‚¹</span>
                <span class="price">99</span>
                <span class="period">/year</span>
              </div>
              <ul class="subscription-features list-group mb-3">
                <li class="list-group-item"><i class="fas fa-check text-success me-2"></i> AI Crop Disease Detection</li>
                <li class="list-group-item"><i class="fas fa-check text-success me-2"></i> Real-time Market Prices</li>
                <li class="list-group-item"><i class="fas fa-check text-success me-2"></i> AI-powered Farming Guidance</li>
                <li class="list-group-item"><i class="fas fa-check text-success me-2"></i> Precision Fertilizer Recommendations</li>
                <li class="list-group-item"><i class="fas fa-check text-success me-2"></i> Accurate Weather Forecasts</li>
                <li class="list-group-item"><i class="fas fa-check text-success me-2"></i> Unlimited Field Management</li>
              </ul>
            </div>
            
            <form id="payment-form" class="mb-3">
              <div class="row g-3">
                <div class="col-md-6">
                  <label for="card-name" class="form-label">Name on Card</label>
                  <input type="text" class="form-control" id="card-name" required>
                </div>
                <div class="col-md-6">
                  <label for="card-number" class="form-label">Card Number</label>
                  <input type="text" class="form-control" id="card-number" placeholder="1234 5678 9012 3456" required>
                </div>
                <div class="col-md-4">
                  <label for="card-expiry-month" class="form-label">Month</label>
                  <select class="form-select" id="card-expiry-month" required>
                    <option value="">MM</option>
                    <option value="01">01</option>
                    <option value="02">02</option>
                    <option value="03">03</option>
                    <option value="04">04</option>
                    <option value="05">05</option>
                    <option value="06">06</option>
                    <option value="07">07</option>
                    <option value="08">08</option>
                    <option value="09">09</option>
                    <option value="10">10</option>
                    <option value="11">11</option>
                    <option value="12">12</option>
                  </select>
                </div>
                <div class="col-md-4">
                  <label for="card-expiry-year" class="form-label">Year</label>
                  <select class="form-select" id="card-expiry-year" required>
                    <option value="">YYYY</option>
                    <option value="2025">2025</option>
                    <option value="2026">2026</option>
                    <option value="2027">2027</option>
                    <option value="2028">2028</option>
                    <option value="2029">2029</option>
                    <option value="2030">2030</option>
                  </select>
                </div>
                <div class="col-md-4">
                  <label for="card-cvv" class="form-label">CVV</label>
                  <input type="text" class="form-control" id="card-cvv" placeholder="123" required maxlength="4">
                </div>
              </div>
              
              <div class="mt-4">
                <button type="submit" id="submit-payment" class="btn btn-primary btn-lg w-100">Pay â‚¹99</button>
              </div>
            </form>
            
            <div class="text-center text-muted small">
              <p class="mb-1">This is a demo payment form. No real payment is processed.</p>
              <p class="mb-0">For testing purposes, any card details will be accepted.</p>
            </div>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Add event listener to the payment form
    document.getElementById('payment-form')?.addEventListener('submit', function(e) {
      e.preventDefault();
      processPayment();
    });
  }
  
  // Show the modal
  const bsModal = new bootstrap.Modal(modal);
  bsModal.show();
}

function processPayment() {
  // Show processing state
  const submitButton = document.getElementById('submit-payment');
  submitButton.disabled = true;
  submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
  
  // Simulate payment processing
  setTimeout(() => {
    // Generate a mock transaction ID
    const transactionId = 'TXN' + Math.floor(Math.random() * 1000000000);
    
    // Handle successful payment
    handleSubscriptionSuccess({
      transaction_id: transactionId,
      amount: 99,
      currency: 'INR'
    });
  }, 2000);
}

function handleSubscriptionSuccess(paymentResponse) {
  // Set up subscription for 1 year
  const now = new Date();
  const expiryDate = new Date(now);
  expiryDate.setFullYear(now.getFullYear() + 1); // 1 year from now
  
  // Save subscription info to localStorage
  const subscriptionData = {
    status: 'active',
    startDate: now.toISOString(),
    expiryDate: expiryDate.toISOString(),
    paymentId: paymentResponse.transaction_id
  };
  
  localStorage.setItem('subscription_data', JSON.stringify(subscriptionData));
  
  // Close the modal
  const modal = document.getElementById('subscriptionModal');
  const bsModal = bootstrap.Modal.getInstance(modal);
  if (bsModal) bsModal.hide();
  
  // Remove any existing banner
  const banner = document.getElementById('subscription-banner');
  if (banner) banner.remove();
  
  // Show success message
  showSubscriptionSuccessBanner();
}

function showSubscriptionSuccessBanner() {
  // Check if banner container exists, otherwise create it
  let bannerContainer = document.getElementById('subscription-banner');
  if (!bannerContainer) {
    bannerContainer = document.createElement('div');
    bannerContainer.id = 'subscription-banner';
    bannerContainer.className = 'alert alert-success alert-dismissible fade show subscription-banner';
    document.body.insertBefore(bannerContainer, document.body.firstChild);
  } else {
    bannerContainer.className = 'alert alert-success alert-dismissible fade show subscription-banner';
  }
  
  // Set banner content for subscription success
  bannerContainer.innerHTML = `
    <strong>Thank You!</strong> Your subscription to FarmAssist AI has been activated. 
    You now have full access to all premium features for 1 year.
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  `;
}

// Weather functions
async function loadWeather(location = 'New Delhi') {
  try {
    const weatherData = await fetchAPI(`weather?location=${encodeURIComponent(location)}`);
    displayWeather(weatherData);
  } catch (error) {
    document.getElementById('currentWeather').innerHTML = `
      <div class="alert alert-danger">
        Failed to load weather data: ${error.message}
      </div>
    `;
    document.getElementById('forecast').innerHTML = '';
    document.getElementById('weatherRecommendations').innerHTML = 
      '<p>Weather recommendations unavailable.</p>';
  }
}

function displayWeather(data) {
  if (!data || !data.forecasts || data.forecasts.length === 0) {
    document.getElementById('currentWeather').innerHTML = 
      '<div class="alert alert-warning">No weather data available.</div>';
    return;
  }
  
  const today = data.forecasts[0];
  
  // Display current weather
  document.getElementById('currentWeather').innerHTML = `
    <div class="row">
      <div class="col-md-6">
        <h3>${data.location}</h3>
        <div class="d-flex align-items-center">
          <div class="weather-icon">
            <i class="fas fa-sun"></i> <!-- This would be dynamic based on weather -->
          </div>
          <div class="ms-3">
            <h2>${today.temp_max}Â°C</h2>
            <p>${today.description}</p>
          </div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="row mt-3">
          <div class="col-6">
            <p><i class="fas fa-temperature-low"></i> Min: ${today.temp_min}Â°C</p>
            <p><i class="fas fa-tint"></i> Humidity: ${today.humidity}%</p>
          </div>
          <div class="col-6">
            <p><i class="fas fa-temperature-high"></i> Max: ${today.temp_max}Â°C</p>
            <p><i class="fas fa-wind"></i> Wind: ${today.wind_speed} km/h</p>
          </div>
        </div>
      </div>
    </div>
  `;
  
  // Display forecast
  let forecastHTML = '';
  data.forecasts.forEach((day, index) => {
    if (index === 0) return; // Skip today
    
    const date = new Date(day.date);
    const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
    
    forecastHTML += `
      <div class="col">
        <div class="forecast-day">
          <p><strong>${dayName}</strong></p>
          <i class="fas fa-sun"></i>
          <p>${day.temp_min}Â° - ${day.temp_max}Â°</p>
          <small>${day.description}</small>
        </div>
      </div>
    `;
  });
  
  document.getElementById('forecast').innerHTML = forecastHTML;
  
  // Generate recommendations
  generateWeatherRecommendations(data);
}

function generateWeatherRecommendations(data) {
  const today = data.forecasts[0];
  let recommendations = '<ul class="list-group">';
  
  // Temperature-based recommendations
  if (today.temp_max > 35) {
    recommendations += '<li class="list-group-item list-group-item-warning"><i class="fas fa-thermometer-full me-2"></i> Extreme heat: Ensure adequate irrigation and consider shade for sensitive crops.</li>';
  }
  
  // Precipitation-based recommendations
  const rainyDays = data.forecasts.filter(day => day.precipitation > 0.5).length;
  if (rainyDays > 2) {
    recommendations += '<li class="list-group-item list-group-item-info"><i class="fas fa-cloud-rain me-2"></i> Heavy rainfall expected: Check drainage systems and delay fertilizer application.</li>';
  } else if (data.forecasts.every(day => day.precipitation < 0.1)) {
    recommendations += '<li class="list-group-item list-group-item-warning"><i class="fas fa-tint-slash me-2"></i> Dry conditions expected: Consider increasing irrigation frequency.</li>';
  }
  
  // Wind-based recommendations
  if (data.forecasts.some(day => day.wind_speed > 20)) {
    recommendations += '<li class="list-group-item list-group-item-warning"><i class="fas fa-wind me-2"></i> Strong winds expected: Secure young plants and postpone pesticide spraying.</li>';
  }
  
  // General recommendations
  recommendations += '<li class="list-group-item"><i class="fas fa-calendar-check me-2"></i> Update your irrigation schedule based on the forecast.</li>';
  recommendations += '</ul>';
  
  document.getElementById('weatherRecommendations').innerHTML = recommendations;
}

// Market Prices functions
async function loadMarketPrices(cropType = '') {
  try {
    const query = cropType ? `crop_type=${encodeURIComponent(cropType)}` : '';
    const data = await fetchAPI(`market_prices?${query}`);
    displayMarketPrices(data.prices);
  } catch (error) {
    document.getElementById('marketPricesTable').innerHTML = `
      <tr>
        <td colspan="7" class="text-center">
          <div class="alert alert-danger">
            Failed to load market prices: ${error.message}
          </div>
        </td>
      </tr>
    `;
  }
}

function displayMarketPrices(prices) {
  if (!prices || prices.length === 0) {
    document.getElementById('marketPricesTable').innerHTML = `
      <tr>
        <td colspan="7" class="text-center">No market prices available</td>
      </tr>
    `;
    return;
  }
  
  // Get data source and date from the first price entry
  const dataSource = prices[0].source || 'Market Data';
  const updateDate = prices[0].date || new Date().toISOString().split('T')[0];
  
  // Update the data source info at the top of the table
  const sourceBadgeEl = document.getElementById('marketDataSource');
  if (sourceBadgeEl) {
    sourceBadgeEl.innerHTML = `
      <div class="d-flex justify-content-between align-items-center mb-2">
        <div>
          <span class="badge bg-info">Source: ${dataSource}</span>
          <span class="badge bg-secondary ms-2">Updated: ${updateDate}</span>
        </div>
        <button class="btn btn-sm btn-outline-primary refresh-prices-btn">
          <i class="fas fa-sync-alt"></i> Refresh
        </button>
      </div>
    `;
    
    // Add event listener to the refresh button
    setTimeout(() => {
      document.querySelector('.refresh-prices-btn')?.addEventListener('click', () => {
        const currentCropType = document.getElementById('cropFilter').value;
        loadMarketPrices(currentCropType);
      });
    }, 100);
  }
  
  let html = '';
  prices.forEach(price => {
    html += `
      <tr>
        <td>${price.crop_type}</td>
        <td>${price.market_name}</td>
        <td>â‚¹${price.price.toFixed(2)}</td>
        <td>â‚¹${price.min_price.toFixed(2)}</td>
        <td>â‚¹${price.max_price.toFixed(2)}</td>
        <td>${price.date}</td>
        <td>
          <button class="btn btn-sm btn-primary track-price-btn" 
            data-crop="${price.crop_type}" 
            data-market="${price.market_name}">
            <i class="fas fa-bell"></i> Track
          </button>
        </td>
      </tr>
    `;
  });
  
  document.getElementById('marketPricesTable').innerHTML = html;
  
  // Add event listeners to track buttons
  document.querySelectorAll('.track-price-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      if (!isLoggedIn()) {
        showSection('loginSection');
        return;
      }
      
      document.getElementById('alertCropType').value = this.dataset.crop;
      document.getElementById('alertMarket').value = this.dataset.market;
      document.getElementById('alertMinPrice').focus();
    });
  });
}

// Disease Detection
function setupDiseaseDetection() {
  const uploadArea = document.getElementById('uploadArea');
  const imageInput = document.getElementById('diseaseImageInput');
  const imagePreview = document.getElementById('imagePreview');
  const previewContainer = document.getElementById('imagePreviewContainer');
  const loadingIndicator = document.getElementById('loadingIndicator');
  const resultContainer = document.getElementById('resultContainer');
  const analyzeBtn = document.getElementById('analyzeImageBtn');
  const resetBtn = document.getElementById('resetImageBtn');
  
  // Setup upload area
  uploadArea.addEventListener('click', () => {
    imageInput.click();
  });
  
  uploadArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    uploadArea.classList.add('border-primary');
  });
  
  uploadArea.addEventListener('dragleave', () => {
    uploadArea.classList.remove('border-primary');
  });
  
  uploadArea.addEventListener('drop', (e) => {
    e.preventDefault();
    uploadArea.classList.remove('border-primary');
    
    if (e.dataTransfer.files.length) {
      handleImageFile(e.dataTransfer.files[0]);
    }
  });
  
  // Image input change
  imageInput.addEventListener('change', () => {
    if (imageInput.files.length) {
      handleImageFile(imageInput.files[0]);
    }
  });
  
  // Add crop type options if needed
  const cropType = document.getElementById('cropType');
  if (cropType && cropType.options.length <= 1) {
    const cropTypes = [
      'Rice', 'Wheat', 'Maize', 'Potato', 'Tomato', 
      'Cotton', 'Soybean', 'Sugarcane', 'Chili', 'Onion'
    ];
    
    cropTypes.forEach(crop => {
      const option = document.createElement('option');
      option.value = crop;
      option.textContent = crop;
      cropType.appendChild(option);
    });
  }
  
  // Add info message for better user guidance
  const infoEl = document.createElement('div');
  infoEl.className = 'mt-3 small text-muted';
  infoEl.innerHTML = '<i class="fas fa-info-circle"></i> For best results, upload a clear, well-lit image of the affected plant part and select the correct crop type.';
  uploadArea.parentNode.appendChild(infoEl);

  // Analyze button
  analyzeBtn.addEventListener('click', async () => {
    if (!imageInput.files.length) {
      alert('Please select an image first');
      return;
    }
    
    // Show loading indicator
    analyzeBtn.disabled = true;
    analyzeBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Analyzing...';
    resultContainer.classList.add('hidden');
    
    try {
      console.log('Starting image analysis...');
      const result = await analyzeImage(imageInput.files[0]);
      console.log('Analysis complete:', result);
      displayDiseaseResult(result);
    } catch (error) {
      console.error('Analysis error:', error);
      alert(`Error analyzing image: ${error.message}`);
    } finally {
      // Reset button state
      analyzeBtn.disabled = false;
      analyzeBtn.innerHTML = 'Analyze Image';
    }
  });
  
  // Reset button
  resetBtn.addEventListener('click', () => {
    resetDiseaseDetection();
  });
  
  function handleImageFile(file) {
    if (!file.type.match('image.*')) {
      alert('Please select an image file');
      return;
    }
    
    // Display image preview
    const reader = new FileReader();
    reader.onload = (e) => {
      imagePreview.src = e.target.result;
      uploadArea.classList.add('hidden');
      previewContainer.classList.remove('hidden');
    };
    reader.readAsDataURL(file);
  }
  
  function resetDiseaseDetection() {
    imageInput.value = '';
    imagePreview.src = '';
    uploadArea.classList.remove('hidden');
    previewContainer.classList.add('hidden');
    resultContainer.classList.add('hidden');
  }
}

async function analyzeImage(imageFile) {
  // First, upload the image to the server
  try {
    // Show loading state
    document.getElementById('analyzeImageBtn').disabled = true;
    document.getElementById('analyzeImageBtn').innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Analyzing...';
    
    const uploadFormData = new FormData();
    uploadFormData.append('image', imageFile);
    
    console.log("Uploading image file:", imageFile.name, imageFile.type, imageFile.size);
    
    const uploadResponse = await fetch('/upload', {
      method: 'POST',
      body: uploadFormData
    });
    
    if (!uploadResponse.ok) {
      const errorText = await uploadResponse.text();
      console.error("Upload failed:", errorText);
      throw new Error(`Upload failed: ${errorText}`);
    }
    
    const uploadResult = await uploadResponse.json();
    console.log("Upload successful:", uploadResult);
    
    // Now send the analysis request with the path to the uploaded image
    const formData = new FormData();
    
    // For debugging, send directly as multipart form to the backend
    formData.append('image', imageFile);
    formData.append('crop_type', document.getElementById('cropType')?.value || 'unknown');
    
    // Add user/field if logged in
    if (isLoggedIn()) {
      formData.append('user_id', getCurrentUserId());
      // If we're in field context, add field_id
      const fieldId = localStorage.getItem('current_field_id');
      if (fieldId) {
        formData.append('field_id', fieldId);
      }
    }
    
    console.log("Sending disease detection request with form data");
    
    // Send analysis request to API using FormData directly
    const analyzeResponse = await fetch('/api/disease_detect', {
      method: 'POST',
      body: formData
    });
    
    if (!analyzeResponse.ok) {
      let errorMessage = 'Failed to analyze image';
      try {
        const errorData = await analyzeResponse.json();
        errorMessage = errorData.error || errorMessage;
      } catch (e) {
        // If response is not JSON
        errorMessage = await analyzeResponse.text() || errorMessage;
      }
      console.error("Disease detection API error:", errorMessage);
      throw new Error(errorMessage);
    }
    
    const responseData = await analyzeResponse.json();
    console.log("Disease detection result:", responseData);
    return responseData;
  } catch (error) {
    console.error("Disease detection error:", error);
    // Show error in the result container
    document.getElementById('diseaseResult').textContent = "Error: " + error.message;
    document.getElementById('confidenceLevel').style.width = "0%";
    document.getElementById('confidenceText').textContent = "0%";
    document.getElementById('symptomsText').textContent = "An error occurred while analyzing the image.";
    document.getElementById('treatmentText').textContent = "Please try again with a different image.";
    document.getElementById('resultContainer').classList.remove('hidden');
    throw error;
  } finally {
    // Reset button state
    document.getElementById('analyzeImageBtn').disabled = false;
    document.getElementById('analyzeImageBtn').innerHTML = 'Analyze Image';
  }
}

function displayDiseaseResult(result) {
  document.getElementById('diseaseResult').textContent = result.disease_name;
  
  // Update confidence bar
  const confidencePercent = Math.round(result.confidence * 100);
  document.getElementById('confidenceLevel').style.width = `${confidencePercent}%`;
  document.getElementById('confidenceText').textContent = `${confidencePercent}%`;
  
  // Update symptoms and treatment
  document.getElementById('symptomsText').textContent = result.symptoms || 'No symptoms information available';
  document.getElementById('treatmentText').textContent = result.treatment || 'No treatment information available';
  
  // Show result container
  document.getElementById('resultContainer').classList.remove('hidden');
  
  // Toggle save button based on login status
  document.getElementById('saveReportBtn').classList.toggle('hidden', !isLoggedIn());
}

// Field management
async function loadFields() {
  if (!isLoggedIn()) return;
  
  // Show loading indicator
  document.getElementById('fieldsList').innerHTML = `
    <li class="text-center py-4">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-2">Loading your fields...</p>
    </li>
  `;
  
  try {
    const userId = getCurrentUserId();
    console.log('Loading fields for user ID:', userId);
    
    // Use the improved fetchAPI with retry logic
    const data = await fetchAPI(`fields?user_id=${userId}`, 'GET', null, 3);
    console.log('Fields loaded:', data);
    
    if (data && Array.isArray(data.fields)) {
      displayFields(data.fields);
    } else {
      console.error('Invalid fields data:', data);
      document.getElementById('fieldsList').innerHTML = `
        <li class="text-center py-4">
          <div class="alert alert-warning">
            No fields found. Click "Add Field" to create your first field.
          </div>
        </li>
      `;
    }
  } catch (error) {
    console.error('Error loading fields:', error);
    document.getElementById('fieldsList').innerHTML = `
      <li class="text-center py-4">
        <div class="alert alert-danger">
          <p><strong>Failed to load fields:</strong> ${error.message || 'Connection error'}</p>
          <button class="btn btn-sm btn-outline-danger mt-2" onclick="loadFields()">
            <i class="fas fa-sync-alt"></i> Retry
          </button>
        </div>
      </li>
    `;
  }
}

function displayFields(fields) {
  const fieldsList = document.getElementById('fieldsList');
  
  if (!fields || fields.length === 0) {
    fieldsList.innerHTML = '<li class="text-center py-4">No fields added yet</li>';
    
    // Update counts
    document.getElementById('fieldCount').textContent = '0';
    document.getElementById('cropCount').textContent = '0';
    return;
  }
  
  // Update counts
  document.getElementById('fieldCount').textContent = fields.length;
  
  // Count unique crops
  const uniqueCrops = new Set(fields.filter(f => f.crop_type).map(f => f.crop_type));
  document.getElementById('cropCount').textContent = uniqueCrops.size;
  
  // Display fields
  let html = '';
  fields.forEach(field => {
    html += `
      <li class="field-item" data-field-id="${field.id}">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <strong>${field.name}</strong>
            ${field.crop_type ? `<span class="badge bg-success ms-2">${field.crop_type}</span>` : ''}
          </div>
          <small>${field.area ? field.area + ' ha' : 'Area not set'}</small>
        </div>
      </li>
    `;
  });
  
  fieldsList.innerHTML = html;
  
  // Add click event to fields
  document.querySelectorAll('.field-item').forEach(item => {
    item.addEventListener('click', async () => {
      const fieldId = item.dataset.fieldId;
      localStorage.setItem('current_field_id', fieldId);
      
      // Get field details and display them
      const field = fields.find(f => f.id.toString() === fieldId);
      if (field) {
        displayFieldDetails(field);
      }
    });
  });
}

async function displayFieldDetails(field) {
  const fieldDetails = document.getElementById('fieldDetails');
  
  // Basic field info
  let html = `
    <div class="row mb-4">
      <div class="col-md-6">
        <h5>${field.name}</h5>
        <p><i class="fas fa-map-marker-alt me-2"></i>${field.location || 'Location not set'}</p>
        <p><i class="fas fa-ruler-combined me-2"></i>${field.area ? field.area + ' hectares' : 'Area not set'}</p>
      </div>
      <div class="col-md-6">
        <p><i class="fas fa-seedling me-2"></i><strong>Crop:</strong> ${field.crop_type || 'Not specified'}</p>
        <p><i class="fas fa-calendar me-2"></i><strong>Planted:</strong> ${field.planting_date || 'Date not set'}</p>
        <p><i class="fas fa-layer-group me-2"></i><strong>Soil:</strong> ${field.soil_type || 'Not specified'}</p>
      </div>
    </div>
    
    <div class="mb-4">
      <ul class="nav nav-pills" id="fieldTabs">
        <li class="nav-item">
          <button class="nav-link active" id="monitoring-btn">Monitoring</button>
        </li>
        <li class="nav-item">
          <button class="nav-link" id="diseases-btn">Diseases</button>
        </li>
        <li class="nav-item">
          <button class="nav-link" id="recommendations-btn">Recommendations</button>
        </li>
      </ul>
    </div>
    
    <div id="tabContent">
      <div id="monitoring-content">
        <div class="text-center py-3">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
      </div>
      
      <div id="diseases-content" class="d-none">
        <div class="text-center py-3">
          <p>No disease reports yet</p>
          <button class="btn btn-primary" id="scanForDiseaseBtn">Scan for Diseases</button>
        </div>
      </div>
      
      <div id="recommendations-content" class="d-none">
        <div class="text-center py-3">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
      </div>
    </div>
  `;
  
  fieldDetails.innerHTML = html;
  
  // Load monitoring data
  try {
    const monitoringData = await fetchAPI(`field_monitoring?field_id=${field.id}`);
    displayFieldMonitoring(monitoringData);
  } catch (error) {
    document.getElementById('monitoring-content').innerHTML = `
      <div class="alert alert-danger">
        Failed to load field monitoring data: ${error.message}
      </div>
    `;
  }
  
  // Load AI farm guidance
  try {
    const guidance = await fetchAPI(`farm_guidance/${field.id}`);
    displayFarmGuidance(guidance);
  } catch (error) {
    document.getElementById('recommendations-content').innerHTML = `
      <div class="alert alert-danger">
        <p><strong>Failed to load AI-powered farming guidance:</strong> ${error.message}</p>
        <button class="btn btn-sm btn-outline-danger mt-2" onclick="retryLoadFarmGuidance(${field.id})">
          <i class="fas fa-sync-alt"></i> Retry
        </button>
      </div>
    `;
  }
  
  // Set up disease scan button
  document.getElementById('scanForDiseaseBtn')?.addEventListener('click', () => {
    showSection('diseaseDetectionSection');
  });
  
  // Set up the tab navigation with simpler approach
  document.getElementById('monitoring-btn').addEventListener('click', function() {
    document.querySelectorAll('#fieldTabs .nav-link').forEach(t => t.classList.remove('active'));
    this.classList.add('active');
    
    document.getElementById('monitoring-content').classList.remove('d-none');
    document.getElementById('diseases-content').classList.add('d-none');
    document.getElementById('recommendations-content').classList.add('d-none');
  });
  
  document.getElementById('diseases-btn').addEventListener('click', function() {
    document.querySelectorAll('#fieldTabs .nav-link').forEach(t => t.classList.remove('active'));
    this.classList.add('active');
    
    document.getElementById('monitoring-content').classList.add('d-none');
    document.getElementById('diseases-content').classList.remove('d-none');
    document.getElementById('recommendations-content').classList.add('d-none');
  });
  
  document.getElementById('recommendations-btn').addEventListener('click', function() {
    document.querySelectorAll('#fieldTabs .nav-link').forEach(t => t.classList.remove('active'));
    this.classList.add('active');
    
    document.getElementById('monitoring-content').classList.add('d-none');
    document.getElementById('diseases-content').classList.add('d-none');
    document.getElementById('recommendations-content').classList.remove('d-none');
  });
}

function displayFieldMonitoring(data) {
  const monitoringContent = document.getElementById('monitoring-content');
  
  if (!data || !data.ndvi) {
    monitoringContent.innerHTML = '<p>No monitoring data available for this field</p>';
    return;
  }
  
  // Calculate health status color
  let healthColor, healthStatus;
  if (data.ndvi > 0.7) {
    healthColor = 'success';
    healthStatus = 'Excellent';
  } else if (data.ndvi > 0.5) {
    healthColor = 'info';
    healthStatus = 'Good';
  } else if (data.ndvi > 0.3) {
    healthColor = 'warning';
    healthStatus = 'Fair';
  } else {
    healthColor = 'danger';
    healthStatus = 'Poor';
  }
  
  let html = `
    <div class="row mt-3">
      <div class="col-md-6">
        <div class="card mb-3">
          <div class="card-body">
            <h5 class="card-title">NDVI Health Index</h5>
            <div class="progress mb-3" style="height: 25px;">
              <div class="progress-bar bg-${healthColor}" role="progressbar" 
                   style="width: ${data.ndvi * 100}%;" 
                   aria-valuenow="${data.ndvi * 100}" aria-valuemin="0" aria-valuemax="100">
                ${(data.ndvi * 100).toFixed(1)}%
              </div>
            </div>
            <p>Status: <span class="badge bg-${healthColor}">${healthStatus}</span></p>
            <p>Last updated: ${data.last_updated}</p>
          </div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="card mb-3">
          <div class="card-body">
            <h5 class="card-title">Crop Information</h5>
            <p><strong>Crop Stage:</strong> ${data.crop_stage || 'Unknown'}</p>
            <p><strong>Estimated Yield:</strong> ${data.estimated_yield || 'Unknown'}</p>
          </div>
        </div>
      </div>
    </div>
  `;
  
  // Add anomalies if any
  if (data.anomalies && data.anomalies.length > 0) {
    html += '<div class="row mt-3"><div class="col-12"><div class="card border-warning">';
    html += '<div class="card-header bg-warning text-white"><h5 class="mb-0">Detected Anomalies</h5></div>';
    html += '<div class="card-body"><ul class="list-group">';
    
    data.anomalies.forEach(anomaly => {
      html += `
        <li class="list-group-item">
          <strong>${anomaly.type}</strong>
          <p><strong>Location:</strong> ${anomaly.location}</p>
          <p><strong>Severity:</strong> ${anomaly.severity}</p>
          <p><strong>Recommendation:</strong> ${anomaly.recommendation}</p>
        </li>
      `;
    });
    
    html += '</ul></div></div></div></div>';
  }
  
  // Add time series
  if (data.time_series && data.time_series.length > 0) {
    html += `
      <div class="row mt-3">
        <div class="col-12">
          <div class="card">
            <div class="card-body">
              <h5 class="card-title">NDVI Time Series</h5>
              <div class="table-responsive">
                <table class="table table-sm">
                  <thead>
                    <tr>
                      <th>Date</th>
                      <th>NDVI Value</th>
                    </tr>
                  </thead>
                  <tbody>
    `;
    
    data.time_series.forEach(point => {
      html += `
        <tr>
          <td>${point.date}</td>
          <td>${point.ndvi.toFixed(2)}</td>
        </tr>
      `;
    });
    
    html += '</tbody></table></div></div></div></div></div>';
  }
  
  monitoringContent.innerHTML = html;
  
  // Update dashboard health index
  document.getElementById('healthIndex').textContent = 
    data.ndvi ? (data.ndvi * 100).toFixed(0) + '%' : '--';
}

function displayFarmGuidance(data) {
  const recommendationsContent = document.getElementById('recommendations-content');
  
  if (!data || !data.guidance) {
    recommendationsContent.innerHTML = '<p>No AI farming guidance available for this field</p>';
    return;
  }
  
  const guidance = data.guidance;
  
  // Build HTML content for the various guidance sections
  let html = `
    <div class="mb-4">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h4>AI-Powered Farming Guidance</h4>
        <span class="badge bg-primary">Crop: ${data.crop_type || 'Unknown'}</span>
      </div>
      <p class="text-muted mb-4">Tailored recommendations for ${data.field_name} based on field details and agricultural best practices.</p>
      
      <div class="accordion" id="guidanceAccordion">
  `;
  
  // General Recommendations
  if (guidance.general_recommendations && guidance.general_recommendations.length > 0) {
    html += `
      <div class="accordion-item">
        <h2 class="accordion-header" id="headingGeneral">
          <button class="accordion-button" type="button" data-bs-toggle="collapse" 
                  data-bs-target="#collapseGeneral" aria-expanded="true" aria-controls="collapseGeneral">
            <i class="fas fa-check-circle me-2"></i> General Management
          </button>
        </h2>
        <div id="collapseGeneral" class="accordion-collapse collapse show" 
             aria-labelledby="headingGeneral" data-bs-parent="#guidanceAccordion">
          <div class="accordion-body">
            <ul class="list-group list-group-flush">
              ${guidance.general_recommendations.map(rec => `
                <li class="list-group-item">
                  <i class="fas fa-angle-right text-primary me-2"></i>${rec}
                </li>
              `).join('')}
            </ul>
          </div>
        </div>
      </div>
    `;
  }
  
  // Crop-Specific Advice
  if (guidance.crop_specific && guidance.crop_specific.length > 0) {
    html += `
      <div class="accordion-item">
        <h2 class="accordion-header" id="headingCrop">
          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                  data-bs-target="#collapseCrop" aria-expanded="false" aria-controls="collapseCrop">
            <i class="fas fa-seedling me-2"></i> Crop-Specific Advice
          </button>
        </h2>
        <div id="collapseCrop" class="accordion-collapse collapse" 
             aria-labelledby="headingCrop" data-bs-parent="#guidanceAccordion">
          <div class="accordion-body">
            <ul class="list-group list-group-flush">
              ${guidance.crop_specific.map(rec => `
                <li class="list-group-item">
                  <i class="fas fa-angle-right text-success me-2"></i>${rec}
                </li>
              `).join('')}
            </ul>
          </div>
        </div>
      </div>
    `;
  }
  
  // Fertilizer Recommendations
  if (guidance.fertilizer && guidance.fertilizer.length > 0) {
    html += `
      <div class="accordion-item">
        <h2 class="accordion-header" id="headingFertilizer">
          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                  data-bs-target="#collapseFertilizer" aria-expanded="false" aria-controls="collapseFertilizer">
            <i class="fas fa-flask me-2"></i> Fertilizer Recommendations
          </button>
        </h2>
        <div id="collapseFertilizer" class="accordion-collapse collapse" 
             aria-labelledby="headingFertilizer" data-bs-parent="#guidanceAccordion">
          <div class="accordion-body">
            <ul class="list-group list-group-flush">
              ${guidance.fertilizer.map(rec => `
                <li class="list-group-item">
                  <i class="fas fa-angle-right text-info me-2"></i>${rec}
                </li>
              `).join('')}
            </ul>
          </div>
        </div>
      </div>
    `;
  }
  
  // Pest Management
  if (guidance.pest_management && guidance.pest_management.length > 0) {
    html += `
      <div class="accordion-item">
        <h2 class="accordion-header" id="headingPests">
          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                  data-bs-target="#collapsePests" aria-expanded="false" aria-controls="collapsePests">
            <i class="fas fa-bug me-2"></i> Pest & Disease Management
          </button>
        </h2>
        <div id="collapsePests" class="accordion-collapse collapse" 
             aria-labelledby="headingPests" data-bs-parent="#guidanceAccordion">
          <div class="accordion-body">
            <ul class="list-group list-group-flush">
              ${guidance.pest_management.map(rec => `
                <li class="list-group-item">
                  <i class="fas fa-angle-right text-warning me-2"></i>${rec}
                </li>
              `).join('')}
            </ul>
          </div>
        </div>
      </div>
    `;
  }
  
  // Irrigation Guidance
  if (guidance.irrigation && guidance.irrigation.length > 0) {
    html += `
      <div class="accordion-item">
        <h2 class="accordion-header" id="headingIrrigation">
          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                  data-bs-target="#collapseIrrigation" aria-expanded="false" aria-controls="collapseIrrigation">
            <i class="fas fa-tint me-2"></i> Irrigation Management
          </button>
        </h2>
        <div id="collapseIrrigation" class="accordion-collapse collapse" 
             aria-labelledby="headingIrrigation" data-bs-parent="#guidanceAccordion">
          <div class="accordion-body">
            <ul class="list-group list-group-flush">
              ${guidance.irrigation.map(rec => `
                <li class="list-group-item">
                  <i class="fas fa-angle-right text-primary me-2"></i>${rec}
                </li>
              `).join('')}
            </ul>
          </div>
        </div>
      </div>
    `;
  }
  
  // Sustainable Practices
  if (guidance.sustainability && guidance.sustainability.length > 0) {
    html += `
      <div class="accordion-item">
        <h2 class="accordion-header" id="headingSustainable">
          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                  data-bs-target="#collapseSustainable" aria-expanded="false" aria-controls="collapseSustainable">
            <i class="fas fa-leaf me-2"></i> Sustainable Practices
          </button>
        </h2>
        <div id="collapseSustainable" class="accordion-collapse collapse" 
             aria-labelledby="headingSustainable" data-bs-parent="#guidanceAccordion">
          <div class="accordion-body">
            <ul class="list-group list-group-flush">
              ${guidance.sustainability.map(rec => `
                <li class="list-group-item">
                  <i class="fas fa-angle-right text-success me-2"></i>${rec}
                </li>
              `).join('')}
            </ul>
          </div>
        </div>
      </div>
    `;
  }
  
  html += `
      </div>
      <div class="mt-3 text-center">
        <button class="btn btn-outline-primary" onclick="printGuidance()">
          <i class="fas fa-print me-2"></i> Print Guidance
        </button>
      </div>
    </div>
  `;
  
  recommendationsContent.innerHTML = html;
}

// Function to retry loading farm guidance if it fails
async function retryLoadFarmGuidance(fieldId) {
  try {
    document.getElementById('recommendations-content').innerHTML = `
      <div class="text-center py-3">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Regenerating AI farm guidance...</p>
      </div>
    `;
    
    const guidance = await fetchAPI(`farm_guidance/${fieldId}`);
    displayFarmGuidance(guidance);
  } catch (error) {
    document.getElementById('recommendations-content').innerHTML = `
      <div class="alert alert-danger">
        <p><strong>Failed to load AI-powered farming guidance:</strong> ${error.message}</p>
        <button class="btn btn-sm btn-outline-danger mt-2" onclick="retryLoadFarmGuidance(${fieldId})">
          <i class="fas fa-sync-alt"></i> Retry
        </button>
      </div>
    `;
  }
}

// Function to print the guidance
function formatArticleContent(articleText) {
  if (!articleText) return '<p>No detailed article available</p>';
  
  // Replace markdown-style headers with HTML
  let formattedContent = articleText
    .replace(/^# (.*?)$/gm, '<h1>$1</h1>')
    .replace(/^## (.*?)$/gm, '<h2>$1</h2>')
    .replace(/^### (.*?)$/gm, '<h3>$1</h3>')
    .replace(/^#### (.*?)$/gm, '<h4>$1</h4>')
    .replace(/^##### (.*?)$/gm, '<h5>$1</h5>')
    .replace(/^###### (.*?)$/gm, '<h6>$1</h6>');
  
  // Replace markdown-style lists
  formattedContent = formattedContent
    .replace(/^- (.*?)$/gm, '<li>$1</li>')
    .replace(/^  - (.*?)$/gm, '<li class="ms-4">$1</li>')
    .replace(/^    - (.*?)$/gm, '<li class="ms-5">$1</li>');
  
  // Wrap adjacent list items in <ul> tags
  formattedContent = formattedContent.replace(/<li>.*?<\/li>(\s*<li>.*?<\/li>)*/g, match => {
    return '<ul class="mb-3">' + match + '</ul>';
  });
  
  // Replace two or more newlines with a paragraph break
  formattedContent = formattedContent.replace(/\n\s*\n/g, '</p><p>');
  
  // Turn single newlines within paragraphs into <br>
  formattedContent = formattedContent.replace(/([^>])\n([^<])/g, '$1<br>$2');
  
  // Remove any Markdown code blocks (```json etc.)
  formattedContent = formattedContent.replace(/```[\s\S]*?```/g, '');
  
  // Replace asterisks with emphasis (bold/italic)
  formattedContent = formattedContent
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold text
    .replace(/\*(.*?)\*/g, '<em>$1</em>'); // Italic text
  
  // Wrap the content in paragraphs
  formattedContent = '<p>' + formattedContent + '</p>';
  
  // Style and enhance headings
  formattedContent = formattedContent
    .replace(/<h1>/g, '<h1 class="text-success mb-3">')
    .replace(/<h2>/g, '<h2 class="text-success mb-3 mt-4">')
    .replace(/<h3>/g, '<h3 class="text-success mb-2 mt-3">');
  
  // Apply article styling
  const styledContent = `
    <div class="article-container">
      ${formattedContent}
    </div>
  `;
  
  return styledContent;
}

function printArticle(cropType, soilType) {
  const articleContent = document.querySelector('.article-content').innerHTML;
  const printWindow = window.open('', '_blank');
  
  printWindow.document.write(`
    <html>
      <head>
        <title>Farm Management Guide: ${cropType} in ${soilType} Soil</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
        <style>
          body { 
            padding: 20px; 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          }
          .article-container {
            max-width: 800px;
            margin: 0 auto;
          }
          h1, h2, h3 {
            color: #2e7d32;
            margin-top: 1.5em;
            margin-bottom: 0.8em;
          }
          h1 { font-size: 24px; }
          h2 { font-size: 20px; }
          h3 { font-size: 18px; }
          p { 
            line-height: 1.6;
            margin-bottom: 1em;
          }
          ul {
            margin-bottom: 1em;
          }
          li {
            margin-bottom: 0.5em;
            line-height: 1.5;
          }
          .header {
            padding-bottom: 15px;
            margin-bottom: 30px;
            border-bottom: 1px solid #ccc;
          }
          @media print {
            .no-print { display: none !important; }
            body { font-size: 12pt; }
            h1 { font-size: 18pt; }
            h2 { font-size: 16pt; }
            h3 { font-size: 14pt; }
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1 class="text-center">Comprehensive Growing Guide</h1>
            <h2 class="text-center">${cropType} Cultivation in ${soilType} Soil</h2>
            <p class="text-center text-muted">Generated by FarmAssist AI on ${new Date().toLocaleDateString()}</p>
            <div class="text-center mt-3 no-print">
              <button class="btn btn-success" onclick="window.print()">
                <i class="fas fa-print me-2"></i>Print Guide
              </button>
            </div>
          </div>
          
          <div class="article-container">
            ${articleContent}
          </div>
          
          <div class="footer mt-4 text-center">
            <p class="small text-muted">
              Â© ${new Date().getFullYear()} FarmAssist AI - Personalized farming guidance for modern agriculture
            </p>
          </div>
        </div>
        <script>
          window.onload = function() {
            // Auto print after a short delay to ensure styles are loaded
            setTimeout(function() {
              // window.print();
            }, 500);
          }
        </script>
      </body>
    </html>
  `);
  
  printWindow.document.close();
}

function printGuidance() {
  const printContent = document.getElementById('recommendations-content').innerHTML;
  const printWindow = window.open('', '_blank');
  
  printWindow.document.write(`
    <html>
      <head>
        <title>Farm Management Guidance</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
        <style>
          body { padding: 20px; }
          @media print {
            .btn { display: none !important; }
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h3 class="text-center mb-4">Farm Management Guidance</h3>
          <hr>
          ${printContent}
        </div>
        <script>
          window.onload = function() { window.print(); }
        </script>
      </body>
    </html>
  `);
  
  printWindow.document.close();
}

// Function to directly view a field's guidance
async function viewFieldGuidance(fieldId) {
  try {
    // Show loading indicator
    document.getElementById('alertsContainer').innerHTML = `
      <div class="alert alert-info">
        <div class="d-flex align-items-center">
          <div class="spinner-border spinner-border-sm me-2" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <span>Loading farm guidance...</span>
        </div>
      </div>
    `;
    
    // Get field details first
    const fieldsResponse = await fetchAPI(`fields?user_id=${getCurrentUserId()}`);
    const field = fieldsResponse.fields.find(f => f.id === fieldId);
    
    if (!field) {
      throw new Error('Field not found');
    }
    
    // Navigate to dashboard section
    showSection('dashboardSection');
    
    // Display field details which will also load the guidance
    displayFieldDetails(field);
    
    // Switch to the recommendations tab
    setTimeout(() => {
      document.getElementById('recommendations-btn').click();
      
      // Scroll to the recommendations tab
      document.getElementById('fieldDetails').scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
      
      // Clear the alert
      document.getElementById('alertsContainer').innerHTML = '';
    }, 500);
    
  } catch (error) {
    // Show error message
    document.getElementById('alertsContainer').innerHTML = `
      <div class="alert alert-danger alert-dismissible fade show" role="alert">
        Failed to load field guidance: ${error.message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    `;
  }
}

// Legacy function for backward compatibility
function displayRecommendations(data) {
  const recommendationsContent = document.getElementById('recommendations-content');
  
  if (!data || (!data.recommendations && !data.generated_by)) {
    recommendationsContent.innerHTML = '<p>No recommendations available for this field</p>';
    return;
  }
  
  let html = '';
  
  // Display different based on response type
  if (typeof data.recommendations === 'object') {
    // Object format
    html += `
      <div class="card mb-3">
        <div class="card-body">
          <h5 class="card-title">Fertilizer Recommendations</h5>
          <p><strong>Recommended NPK Ratio:</strong> ${data.recommendations.npk_ratio}</p>
          <p><strong>Application Rate:</strong> ${data.recommendations.rate}</p>
          <p><strong>Timing:</strong> ${data.recommendations.timing}</p>
          <p><strong>Method:</strong> ${data.recommendations.method}</p>
          <p><strong>Notes:</strong> ${data.recommendations.notes}</p>
        </div>
        <div class="card-footer text-muted">
          Generated by: ${data.generated_by}
        </div>
      </div>
    `;
  } else {
    // String format (AI-generated text)
    html += `
      <div class="card mb-3">
        <div class="card-body">
          <h5 class="card-title">AI Fertilizer Recommendations</h5>
          <div>${data.recommendations.replace(/\n/g, '<br>')}</div>
        </div>
        <div class="card-footer text-muted">
          Generated by: ${data.generated_by}
        </div>
      </div>
    `;
  }
  
  recommendationsContent.innerHTML = html;
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
  // Initialize auth UI
  updateAuthUI();
  
  // Show login section by default if user is not logged in, otherwise show dashboard
  if (!isLoggedIn()) {
    showSection('loginSection');
  } else {
    showSection('dashboardSection');
    loadFields();
  }
  
  // Navigation links
  document.getElementById('homeNav').addEventListener('click', () => showSection('homeSection'));
  document.getElementById('dashboardNav').addEventListener('click', () => {
    if (isLoggedIn()) {
      showSection('dashboardSection');
      loadFields();
    } else {
      showSection('loginSection');
    }
  });
  document.getElementById('diseaseDetectNav').addEventListener('click', () => showSection('diseaseDetectionSection'));
  document.getElementById('marketPricesNav').addEventListener('click', () => {
    showSection('marketPricesSection');
    loadMarketPrices();
  });
  document.getElementById('weatherNav').addEventListener('click', () => {
    showSection('weatherSection');
    loadWeather();
  });
  
  // Auth links
  document.getElementById('loginNav').addEventListener('click', () => showSection('loginSection'));
  document.getElementById('registerNav').addEventListener('click', () => showSection('registerSection'));
  document.getElementById('logoutBtn').addEventListener('click', () => {
    logout();
    showSection('loginSection');
  });
  document.getElementById('switchToRegister').addEventListener('click', () => showSection('registerSection'));
  document.getElementById('switchToLogin').addEventListener('click', () => showSection('loginSection'));
  
  // Feature links
  document.getElementById('getStartedBtn').addEventListener('click', () => {
    if (isLoggedIn()) {
      showSection('dashboardSection');
      loadFields();
    } else {
      showSection('registerSection');
    }
  });
  document.getElementById('featureDiseaseBtn').addEventListener('click', () => showSection('diseaseDetectionSection'));
  document.getElementById('featureMarketBtn').addEventListener('click', () => {
    showSection('marketPricesSection');
    loadMarketPrices();
    if (isLoggedIn()) {
      loadUserAlerts();
    }
  });
  document.getElementById('featureWeatherBtn').addEventListener('click', () => {
    showSection('weatherSection');
    loadWeather();
  });
  
  // Advanced Fertilizer and Irrigation buttons
  document.getElementById('featureFertilizerBtn').addEventListener('click', () => {
    // Modal will be shown automatically via data attributes
    // Reset the form
    document.getElementById('fertilizerForm').reset();
    document.getElementById('fertilizerResults').classList.add('hidden');
  });
  
  document.getElementById('featureIrrigationBtn').addEventListener('click', () => {
    // Modal will be shown automatically via data attributes
    // Reset the form
    document.getElementById('irrigationForm').reset();
    document.getElementById('irrigationResults').classList.add('hidden');
  });
  
  document.getElementById('generateFertilizerBtn').addEventListener('click', getAdvancedFertilizerRecommendations);
  document.getElementById('generateIrrigationBtn').addEventListener('click', getIrrigationRecommendations);
  
  // Login form
  document.getElementById('loginForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const username = document.getElementById('loginUsername').value.trim();
    const password = document.getElementById('loginPassword').value;
    
    if (!username || !password) {
      showError('loginError', 'Username and password are required');
      return;
    }
    
    // Disable form during submission
    const loginBtn = document.querySelector('#loginForm button[type="submit"]');
    const originalBtnText = loginBtn.textContent;
    loginBtn.disabled = true;
    loginBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Logging in...';
    
    try {
      console.log('Attempting login for user:', username);
      // Use the improved fetchAPI with retry logic
      const data = await fetchAPI('users/login', 'POST', { username, password }, 3);
      console.log('Login successful:', data);
      
      if (data && data.id) {
        login(data.id, data.username);
        showSection('dashboardSection');
        loadFields();
      } else {
        showError('loginError', 'Invalid login response from server');
      }
    } catch (error) {
      console.error('Login error:', error);
      showError('loginError', error.message || 'Login failed. Please try again.');
    } finally {
      // Re-enable form
      loginBtn.disabled = false;
      loginBtn.textContent = originalBtnText;
    }
  });
  
  // Register form
  document.getElementById('registerForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const username = document.getElementById('registerUsername').value;
    const email = document.getElementById('registerEmail').value;
    const password = document.getElementById('registerPassword').value;
    const confirmPassword = document.getElementById('registerConfirmPassword').value;
    
    if (password !== confirmPassword) {
      showError('registerError', 'Passwords do not match');
      return;
    }
    
    try {
      const data = await fetchAPI('users/register', 'POST', { 
        username, 
        email, 
        password 
      });
      
      // Auto-login after registration
      login(data.id, data.username);
      showSection('dashboardSection');
      loadFields();
    } catch (error) {
      showError('registerError', error.message || 'Registration failed');
    }
  });
  
  // Add field modal
  document.getElementById('addFieldBtn').addEventListener('click', function() {
    const modal = new bootstrap.Modal(document.getElementById('addFieldModal'));
    modal.show();
  });
  
  // Save field
  document.getElementById('saveFieldBtn').addEventListener('click', async function() {
    // Validate required fields
    const fieldName = document.getElementById('fieldName').value.trim();
    if (!fieldName) {
      alert('Field name is required');
      document.getElementById('fieldName').focus();
      return;
    }

    // Get the form data
    const fieldData = {
      user_id: getCurrentUserId(),
      name: fieldName,
      location: document.getElementById('fieldLocation').value.trim(),
      area: parseFloat(document.getElementById('fieldArea').value) || 0,
      crop_type: document.getElementById('cropType').value,
      planting_date: document.getElementById('plantingDate').value,
      soil_type: document.getElementById('soilType').value,
      notes: document.getElementById('fieldNotes').value.trim()
    };
    
    console.log('Submitting field data:', fieldData);
    
    // Disable the save button to prevent double submission
    const saveBtn = document.getElementById('saveFieldBtn');
    const originalText = saveBtn.textContent;
    saveBtn.disabled = true;
    saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
    
    try {
      // Make API call with explicit error handling
      const response = await fetchAPI('fields', 'POST', fieldData);
      console.log('Field saved successfully:', response);
      
      // Show success message with AI guidance information
      document.getElementById('alertsContainer').innerHTML = `
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <h5><i class="fas fa-check-circle me-2"></i>Field "${response.name}" created successfully!</h5>
          ${response.guidance ? 
            `<hr>
             <p><strong><i class="fas fa-robot me-2"></i>AI-Powered Farm Guidance Generated!</strong></p>
             <p>Comprehensive farming recommendations are now available for your field.</p>
             <button class="btn btn-sm btn-primary" onclick="viewFieldGuidance(${response.id})">
               <i class="fas fa-eye me-2"></i>View Farm Guidance
             </button>`
            : ''}
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      `;
      
      // Close modal and refresh fields
      bootstrap.Modal.getInstance(document.getElementById('addFieldModal')).hide();
      document.getElementById('fieldForm').reset();
      
      // Reload the fields list
      loadFields();
    } catch (error) {
      console.error('Error saving field:', error);
      alert(`Failed to save field: ${error.message || 'Connection error'}`);
    } finally {
      // Re-enable the save button
      saveBtn.disabled = false;
      saveBtn.textContent = originalText;
    }
  });
  
  // Market price filter
  document.getElementById('applyFilterBtn').addEventListener('click', function() {
    const cropType = document.getElementById('cropFilter').value;
    loadMarketPrices(cropType);
  });
  
  // Price alert form
  document.getElementById('priceAlertForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (!isLoggedIn()) {
      showSection('loginSection');
      return;
    }
    
    // Validate crop type
    const cropType = document.getElementById('alertCropType').value;
    if (!cropType) {
      alert('Please select a crop type');
      return;
    }
    
    // Form data
    const alertData = {
      user_id: getCurrentUserId(),
      crop_type: cropType,
      market_name: document.getElementById('alertMarket').value,
      price_alert_min: document.getElementById('alertMinPrice').value || null,
      price_alert_max: document.getElementById('alertMaxPrice').value || null
    };
    
    console.log('Setting price alert:', alertData);
    
    // Disable form during submission
    const submitBtn = document.querySelector('#priceAlertForm button[type="submit"]');
    const originalBtnText = submitBtn.textContent;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Setting alert...';
    
    try {
      const response = await fetchAPI('market_favorites', 'POST', alertData, 3);
      console.log('Price alert set successfully:', response);
      
      // Success message
      alert('Price alert set successfully!');
      document.getElementById('priceAlertForm').reset();
      
      // Reload user alerts
      loadUserAlerts();
    } catch (error) {
      console.error('Error setting price alert:', error);
      alert(`Failed to set price alert: ${error.message || 'Connection error'}`);
    } finally {
      // Re-enable form
      submitBtn.disabled = false;
      submitBtn.textContent = originalBtnText;
    }
  });
  
  // Function to load user's price alerts
  async function loadUserAlerts() {
    if (!isLoggedIn()) return;
    
    const alertsList = document.getElementById('alertsList');
    
    // Show loading indicator
    alertsList.innerHTML = `
      <li class="list-group-item text-center">
        <div class="spinner-border spinner-border-sm text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <span class="ms-2">Loading alerts...</span>
      </li>
    `;
    
    try {
      const userId = getCurrentUserId();
      const data = await fetchAPI(`market_favorites?user_id=${userId}`, 'GET', null, 3);
      console.log('User alerts loaded:', data);
      
      if (data && Array.isArray(data.favorites) && data.favorites.length > 0) {
        let html = '';
        data.favorites.forEach(alert => {
          html += `
            <li class="list-group-item">
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <strong>${alert.crop_type}</strong>
                  ${alert.market_name ? `<span class="badge bg-secondary ms-2">${alert.market_name}</span>` : ''}
                </div>
                <div>
                  ${alert.price_alert_min ? `<span class="badge bg-success">Min: â‚¹${alert.price_alert_min}</span>` : ''}
                  ${alert.price_alert_max ? `<span class="badge bg-danger ms-1">Max: â‚¹${alert.price_alert_max}</span>` : ''}
                </div>
              </div>
            </li>
          `;
        });
        alertsList.innerHTML = html;
      } else {
        alertsList.innerHTML = '<li class="list-group-item text-center">No alerts set</li>';
      }
    } catch (error) {
      console.error('Error loading user alerts:', error);
      alertsList.innerHTML = `
        <li class="list-group-item text-center text-danger">
          Failed to load alerts: ${error.message || 'Connection error'}
        </li>
      `;
    }
  }
  
  // Weather location
  document.getElementById('getWeatherBtn').addEventListener('click', function() {
    const location = document.getElementById('locationInput').value.trim();
    if (location) {
      loadWeather(location);
    }
  });
  
  // Initialize disease detection
  setupDiseaseDetection();
  
  // Quick Farm Guidance form
  document.getElementById('quickGuidanceForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const cropType = document.getElementById('quickCropType').value;
    const soilType = document.getElementById('quickSoilType').value;
    
    if (!cropType || !soilType) {
      alert('Please select both crop type and soil type');
      return;
    }
    
    await getQuickFarmGuidance(cropType, soilType);
  });
  
  // Feature buttons for AI Kisan Chatbot
  document.getElementById('featureChatbotBtn')?.addEventListener('click', function() {
    if (isLoggedIn()) {
      showSection('dashboardSection');
      // Scroll to chatbot section after a short delay to ensure section is visible
      setTimeout(() => {
        const chatbotSection = document.querySelector('.dashboard-widget .chat-container');
        if (chatbotSection) {
          chatbotSection.scrollIntoView({ behavior: 'smooth' });
          document.getElementById('chatInput').focus();
        }
      }, 100);
    } else {
      showSection('loginSection');
      showError('loginError', 'Please login to use the AI Kisan Chatbot');
    }
  });
  
  // Update auth UI
  updateAuthUI();
  
  // Set up chat functionality
  setupChat();
  
  // Load saved guidances in dashboard
  loadSavedGuidances();
});

// AI Kisan Chatbot functions
function setupChat() {
  const chatForm = document.getElementById('chatForm');
  if (!chatForm) return;
  
  // Load previous chat messages
  loadChatHistory();
  
  chatForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const chatInput = document.getElementById('chatInput');
    const userMessage = chatInput.value.trim();
    
    if (!userMessage) return;
    
    // Add user message to chat
    addChatMessage(userMessage, 'user');
    
    // Clear input
    chatInput.value = '';
    
    // Generate AI response
    generateAIResponse(userMessage);
  });
}

function loadChatHistory() {
  if (!isLoggedIn()) return;
  
  // Get chat history from localStorage
  const userId = getCurrentUserId();
  const chatHistory = JSON.parse(localStorage.getItem(`chat_history_${userId}`) || '[]');
  
  const chatMessages = document.getElementById('chatMessages');
  if (!chatMessages || chatHistory.length === 0) return;
  
  // Add welcome message if there's no history
  if (chatHistory.length === 0) {
    return;
  }
  
  // Clear existing messages (keeping the welcome message)
  const welcomeMessage = chatMessages.firstElementChild;
  chatMessages.innerHTML = '';
  chatMessages.appendChild(welcomeMessage);
  
  // Add chat history
  chatHistory.forEach(message => {
    addChatMessage(message.text, message.sender, false);
  });
  
  // Scroll to bottom
  scrollChatToBottom();
}

function addChatMessage(text, sender, saveToHistory = true) {
  const chatMessages = document.getElementById('chatMessages');
  if (!chatMessages) return;
  
  // Create message element
  const messageEl = document.createElement('div');
  messageEl.className = `chat-message ${sender}`;
  
  // Create message content
  const contentEl = document.createElement('div');
  contentEl.className = 'message-content';
  
  // Format message text with paragraphs
  const textHtml = text.split('\n')
    .filter(line => line.trim() !== '')
    .map(line => `<p>${line}</p>`)
    .join('');
  
  contentEl.innerHTML = textHtml;
  messageEl.appendChild(contentEl);
  chatMessages.appendChild(messageEl);
  
  // Save to history if needed
  if (saveToHistory && isLoggedIn()) {
    saveChatMessage(text, sender);
  }
  
  // Scroll to bottom
  scrollChatToBottom();
}

function scrollChatToBottom() {
  const chatMessages = document.getElementById('chatMessages');
  if (chatMessages) {
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }
}

function saveChatMessage(text, sender) {
  if (!isLoggedIn()) return;
  
  const userId = getCurrentUserId();
  const chatHistory = JSON.parse(localStorage.getItem(`chat_history_${userId}`) || '[]');
  
  // Add new message
  chatHistory.push({
    id: Date.now(),
    text: text,
    sender: sender,
    timestamp: new Date().toISOString()
  });
  
  // Limit history to 50 messages
  if (chatHistory.length > 50) {
    chatHistory.shift();
  }
  
  // Save back to localStorage
  localStorage.setItem(`chat_history_${userId}`, JSON.stringify(chatHistory));
}

function clearChat() {
  if (!confirm('Are you sure you want to clear the chat history?')) {
    return;
  }
  
  // Clear chat history from localStorage
  if (isLoggedIn()) {
    const userId = getCurrentUserId();
    localStorage.removeItem(`chat_history_${userId}`);
  }
  
  // Clear chat UI (keep welcome message)
  const chatMessages = document.getElementById('chatMessages');
  if (chatMessages) {
    const welcomeMessage = chatMessages.firstElementChild;
    chatMessages.innerHTML = '';
    chatMessages.appendChild(welcomeMessage);
  }
}

async function generateAIResponse(userMessage) {
  // Show typing indicator
  addTypingIndicator();
  
  try {
    // Call the API with user's question - we'll use Gemini API on the backend
    const response = await fetchAPI('chat', 'POST', {
      message: userMessage,
      user_id: getCurrentUserId() || 'anonymous'
    });
    
    // Remove typing indicator
    removeTypingIndicator();
    
    // Add AI response to chat
    if (response && response.reply) {
      addChatMessage(response.reply, 'bot');
    } else {
      throw new Error('Invalid response format');
    }
  } catch (error) {
    console.error('Chat API error:', error);
    
    // Remove typing indicator
    removeTypingIndicator();
    
    // Add fallback response
    const fallbackResponse = "I'm sorry, I'm having trouble processing your request right now. Please try again later.";
    addChatMessage(fallbackResponse, 'bot');
  }
}

function addTypingIndicator() {
  const chatMessages = document.getElementById('chatMessages');
  if (!chatMessages) return;
  
  // Create typing indicator
  const typingIndicator = document.createElement('div');
  typingIndicator.id = 'typingIndicator';
  typingIndicator.className = 'chat-message bot';
  typingIndicator.innerHTML = `
    <div class="message-content">
      <div class="typing-indicator">
        <span></span>
        <span></span>
        <span></span>
      </div>
    </div>
  `;
  chatMessages.appendChild(typingIndicator);
  
  // Scroll to bottom
  scrollChatToBottom();
}

function removeTypingIndicator() {
  const typingIndicator = document.getElementById('typingIndicator');
  if (typingIndicator) {
    typingIndicator.remove();
  }
}

// Function to save guidance to dashboard
function saveGuidanceToDashboard(cropType, soilType) {
  // Check if user is logged in
  if (!isLoggedIn()) {
    alert('Please login to save this guidance to your dashboard');
    showSection('loginSection');
    return;
  }
  
  // Get the guidance content
  const guidanceContent = document.getElementById('guidanceResults')?.innerHTML || '';
  
  if (!guidanceContent || guidanceContent.includes('Select your crop and soil type')) {
    alert('No guidance content to save');
    return;
  }
  
  // Create saved guidance object
  const savedGuidance = {
    id: 'guid_' + Date.now(),
    crop_type: cropType,
    soil_type: soilType,
    date_saved: new Date().toISOString(),
    content: guidanceContent
  };
  
  // Get existing saved guidances or initialize empty array
  let savedGuidances = JSON.parse(localStorage.getItem('saved_guidances') || '[]');
  
  // Add new guidance
  savedGuidances.push(savedGuidance);
  
  // Save back to localStorage
  localStorage.setItem('saved_guidances', JSON.stringify(savedGuidances));
  
  // Show success message
  alert('Guidance saved to your dashboard successfully!');
  
  // Update the saved guidances list in dashboard if it exists
  loadSavedGuidances();
}

// Function to load saved guidances in dashboard
function loadSavedGuidances() {
  if (!isLoggedIn()) return;
  
  const savedGuidancesContainer = document.getElementById('savedGuidancesContainer');
  if (!savedGuidancesContainer) return;
  
  // Get saved guidances from localStorage
  const savedGuidances = JSON.parse(localStorage.getItem('saved_guidances') || '[]');
  
  if (savedGuidances.length === 0) {
    savedGuidancesContainer.innerHTML = `
      <div class="alert alert-info">
        <p>You haven't saved any guidance articles yet.</p>
        <p>Generate farm guidance and click 'Save' to store articles here for future reference.</p>
      </div>
    `;
    return;
  }
  
  // Create HTML for saved guidances
  let html = `<div class="row row-cols-1 row-cols-md-2 g-4">`;
  
  savedGuidances.forEach(guidance => {
    const dateFormatted = new Date(guidance.date_saved).toLocaleDateString();
    
    html += `
      <div class="col">
        <div class="card h-100 saved-guidance-card">
          <div class="card-header bg-success text-white">
            <h5 class="card-title mb-0">
              <i class="fas fa-leaf me-2"></i>${guidance.crop_type} in ${guidance.soil_type} Soil
            </h5>
          </div>
          <div class="card-body">
            <p class="card-text small text-muted">Saved on ${dateFormatted}</p>
            <div class="d-grid gap-2">
              <button class="btn btn-outline-primary btn-sm" onclick="viewSavedGuidance('${guidance.id}')">
                <i class="fas fa-eye me-1"></i> View
              </button>
              <button class="btn btn-outline-danger btn-sm" onclick="deleteSavedGuidance('${guidance.id}')">
                <i class="fas fa-trash me-1"></i> Delete
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  });
  
  html += `</div>`;
  savedGuidancesContainer.innerHTML = html;
}

// Function to view a saved guidance
function viewSavedGuidance(guidanceId) {
  // Get saved guidances from localStorage
  const savedGuidances = JSON.parse(localStorage.getItem('saved_guidances') || '[]');
  const guidance = savedGuidances.find(g => g.id === guidanceId);
  
  if (!guidance) {
    alert('Guidance not found!');
    return;
  }
  
  // Create a modal to display the guidance
  let modal = document.createElement('div');
  modal.id = 'savedGuidanceModal';
  modal.className = 'modal fade';
  modal.setAttribute('tabindex', '-1');
  
  modal.innerHTML = `
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
      <div class="modal-content">
        <div class="modal-header bg-success text-white">
          <h5 class="modal-title">Guidance for ${guidance.crop_type} in ${guidance.soil_type} Soil</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p class="text-muted small">Saved on ${new Date(guidance.date_saved).toLocaleDateString()}</p>
          <hr>
          <div class="saved-guidance-content">
            ${guidance.content}
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-outline-primary" onclick="printSavedGuidance('${guidance.id}')">
            <i class="fas fa-print me-1"></i> Print
          </button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  `;
  
  // Add modal to body and show it
  document.body.appendChild(modal);
  const bsModal = new bootstrap.Modal(modal);
  bsModal.show();
  
  // Add event listener to remove modal from DOM after it's closed
  modal.addEventListener('hidden.bs.modal', function() {
    document.body.removeChild(modal);
  });
}

// Function to delete a saved guidance
function deleteSavedGuidance(guidanceId) {
  if (!confirm('Are you sure you want to delete this saved guidance?')) {
    return;
  }
  
  // Get saved guidances from localStorage
  let savedGuidances = JSON.parse(localStorage.getItem('saved_guidances') || '[]');
  
  // Filter out the guidance to delete
  savedGuidances = savedGuidances.filter(g => g.id !== guidanceId);
  
  // Save back to localStorage
  localStorage.setItem('saved_guidances', JSON.stringify(savedGuidances));
  
  // Reload the saved guidances list
  loadSavedGuidances();
  
  alert('Guidance deleted successfully!');
}

// Function to print a saved guidance
function printSavedGuidance(guidanceId) {
  // Get saved guidances from localStorage
  const savedGuidances = JSON.parse(localStorage.getItem('saved_guidances') || '[]');
  const guidance = savedGuidances.find(g => g.id === guidanceId);
  
  if (!guidance) {
    alert('Guidance not found!');
    return;
  }
  
  const title = `Growing Guide for ${guidance.crop_type} in ${guidance.soil_type} Soil`;
  
  const printWindow = window.open('', '_blank');
  printWindow.document.write(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>${title}</title>
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
      <style>
        body { padding: 20px; }
        .article-header { margin-bottom: 20px; }
        @media print {
          .no-print { display: none; }
        }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="article-header">
          <h1>${title}</h1>
          <p class="text-muted">Generated by FarmAssist AI, saved on ${new Date(guidance.date_saved).toLocaleDateString()}</p>
          <button class="btn btn-primary no-print" onclick="window.print()">Print</button>
          <hr>
        </div>
        <div class="article-content">
          ${guidance.content}
        </div>
      </div>
    </body>
    </html>
  `);
  printWindow.document.close();
}