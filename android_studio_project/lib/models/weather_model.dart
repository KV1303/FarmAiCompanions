import 'package:hive/hive.dart';

part 'weather_model.g.dart';

@HiveType(typeId: 3)
class Weather {
  @HiveField(0)
  final String id;
  
  @HiveField(1)
  final double latitude;
  
  @HiveField(2)
  final double longitude;
  
  @HiveField(3)
  final String location;
  
  @HiveField(4)
  final DateTime date;
  
  @HiveField(5)
  final double temperature;
  
  @HiveField(6)
  final double minTemperature;
  
  @HiveField(7)
  final double maxTemperature;
  
  @HiveField(8)
  final double humidity;
  
  @HiveField(9)
  final double precipitation;
  
  @HiveField(10)
  final double windSpeed;
  
  @HiveField(11)
  final String windDirection;
  
  @HiveField(12)
  final String description;
  
  @HiveField(13)
  final String iconCode;
  
  @HiveField(14)
  final DateTime lastUpdated;

  Weather({
    required this.id,
    required this.latitude,
    required this.longitude,
    required this.location,
    required this.date,
    required this.temperature,
    required this.minTemperature,
    required this.maxTemperature,
    required this.humidity,
    required this.precipitation,
    required this.windSpeed,
    required this.windDirection,
    required this.description,
    required this.iconCode,
    required this.lastUpdated,
  });

  factory Weather.fromJson(Map<String, dynamic> json) {
    return Weather(
      id: json['id'] ?? '',
      latitude: json['latitude'] != null ? double.parse(json['latitude'].toString()) : 0.0,
      longitude: json['longitude'] != null ? double.parse(json['longitude'].toString()) : 0.0,
      location: json['location'] ?? '',
      date: json['date'] != null ? DateTime.parse(json['date']) : DateTime.now(),
      temperature: json['temperature'] != null ? double.parse(json['temperature'].toString()) : 0.0,
      minTemperature: json['min_temperature'] != null ? double.parse(json['min_temperature'].toString()) : 0.0,
      maxTemperature: json['max_temperature'] != null ? double.parse(json['max_temperature'].toString()) : 0.0,
      humidity: json['humidity'] != null ? double.parse(json['humidity'].toString()) : 0.0,
      precipitation: json['precipitation'] != null ? double.parse(json['precipitation'].toString()) : 0.0,
      windSpeed: json['wind_speed'] != null ? double.parse(json['wind_speed'].toString()) : 0.0,
      windDirection: json['wind_direction'] ?? '',
      description: json['description'] ?? '',
      iconCode: json['icon_code'] ?? '',
      lastUpdated: json['last_updated'] != null ? DateTime.parse(json['last_updated']) : DateTime.now(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'latitude': latitude,
      'longitude': longitude,
      'location': location,
      'date': date.toIso8601String(),
      'temperature': temperature,
      'min_temperature': minTemperature,
      'max_temperature': maxTemperature,
      'humidity': humidity,
      'precipitation': precipitation,
      'wind_speed': windSpeed,
      'wind_direction': windDirection,
      'description': description,
      'icon_code': iconCode,
      'last_updated': lastUpdated.toIso8601String(),
    };
  }

  // Get weather icon based on the weather condition
  String getWeatherIcon() {
    if (iconCode.isNotEmpty) {
      return 'https://openweathermap.org/img/wn/$iconCode@2x.png';
    }
    
    // Fallback logic based on description
    final lowerDesc = description.toLowerCase();
    
    if (lowerDesc.contains('clear') || lowerDesc.contains('sunny')) {
      return 'https://openweathermap.org/img/wn/01d@2x.png';
    } else if (lowerDesc.contains('cloud')) {
      return 'https://openweathermap.org/img/wn/03d@2x.png';
    } else if (lowerDesc.contains('rain') || lowerDesc.contains('shower')) {
      return 'https://openweathermap.org/img/wn/10d@2x.png';
    } else if (lowerDesc.contains('thunder') || lowerDesc.contains('storm')) {
      return 'https://openweathermap.org/img/wn/11d@2x.png';
    } else if (lowerDesc.contains('snow')) {
      return 'https://openweathermap.org/img/wn/13d@2x.png';
    } else if (lowerDesc.contains('mist') || lowerDesc.contains('fog')) {
      return 'https://openweathermap.org/img/wn/50d@2x.png';
    } else {
      return 'https://openweathermap.org/img/wn/02d@2x.png';  // Default - few clouds
    }
  }
}

// This will be generated by Hive
class WeatherAdapter extends TypeAdapter<Weather> {
  @override
  final int typeId = 3;

  @override
  Weather read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    return Weather(
      id: fields[0] as String,
      latitude: fields[1] as double,
      longitude: fields[2] as double,
      location: fields[3] as String,
      date: fields[4] as DateTime,
      temperature: fields[5] as double,
      minTemperature: fields[6] as double,
      maxTemperature: fields[7] as double,
      humidity: fields[8] as double,
      precipitation: fields[9] as double,
      windSpeed: fields[10] as double,
      windDirection: fields[11] as String,
      description: fields[12] as String,
      iconCode: fields[13] as String,
      lastUpdated: fields[14] as DateTime,
    );
  }

  @override
  void write(BinaryWriter writer, Weather obj) {
    writer
      ..writeByte(15)
      ..writeByte(0)
      ..write(obj.id)
      ..writeByte(1)
      ..write(obj.latitude)
      ..writeByte(2)
      ..write(obj.longitude)
      ..writeByte(3)
      ..write(obj.location)
      ..writeByte(4)
      ..write(obj.date)
      ..writeByte(5)
      ..write(obj.temperature)
      ..writeByte(6)
      ..write(obj.minTemperature)
      ..writeByte(7)
      ..write(obj.maxTemperature)
      ..writeByte(8)
      ..write(obj.humidity)
      ..writeByte(9)
      ..write(obj.precipitation)
      ..writeByte(10)
      ..write(obj.windSpeed)
      ..writeByte(11)
      ..write(obj.windDirection)
      ..writeByte(12)
      ..write(obj.description)
      ..writeByte(13)
      ..write(obj.iconCode)
      ..writeByte(14)
      ..write(obj.lastUpdated);
  }

  @override
  int get hashCode => typeId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WeatherAdapter &&
          runtimeType == other.runtimeType &&
          typeId == other.typeId;
}
