import 'package:hive/hive.dart';

part 'disease_model.g.dart';

@HiveType(typeId: 5)
class Disease {
  @HiveField(0)
  final String id;
  
  @HiveField(1)
  final String name;
  
  @HiveField(2)
  final String scientificName;
  
  @HiveField(3)
  final String cropType;
  
  @HiveField(4)
  final List<String> symptoms;
  
  @HiveField(5)
  final List<String> treatments;
  
  @HiveField(6)
  final List<String> preventiveMeasures;
  
  @HiveField(7)
  final String imageUrl;
  
  @HiveField(8)
  final String severity;
  
  @HiveField(9)
  final List<String> affectedCrops;

  Disease({
    required this.id,
    required this.name,
    required this.scientificName,
    required this.cropType,
    required this.symptoms,
    required this.treatments,
    required this.preventiveMeasures,
    required this.imageUrl,
    required this.severity,
    required this.affectedCrops,
  });

  factory Disease.fromJson(Map<String, dynamic> json) {
    return Disease(
      id: json['id'] ?? '',
      name: json['name'] ?? '',
      scientificName: json['scientific_name'] ?? '',
      cropType: json['crop_type'] ?? '',
      symptoms: json['symptoms'] != null ? List<String>.from(json['symptoms']) : [],
      treatments: json['treatments'] != null ? List<String>.from(json['treatments']) : [],
      preventiveMeasures: json['preventive_measures'] != null ? List<String>.from(json['preventive_measures']) : [],
      imageUrl: json['image_url'] ?? '',
      severity: json['severity'] ?? 'Medium',
      affectedCrops: json['affected_crops'] != null ? List<String>.from(json['affected_crops']) : [],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'scientific_name': scientificName,
      'crop_type': cropType,
      'symptoms': symptoms,
      'treatments': treatments,
      'preventive_measures': preventiveMeasures,
      'image_url': imageUrl,
      'severity': severity,
      'affected_crops': affectedCrops,
    };
  }

  // Get severity color
  Map<String, dynamic> getSeverityInfo() {
    switch (severity.toLowerCase()) {
      case 'low':
        return {
          'color': 0xFF4CAF50, // green
          'icon': 'info',
          'description': 'Low impact on crop yield'
        };
      case 'medium':
        return {
          'color': 0xFFFFC107, // amber
          'icon': 'warning',
          'description': 'Moderate impact on crop yield'
        };
      case 'high':
        return {
          'color': 0xFFFF5722, // deep orange
          'icon': 'error',
          'description': 'Significant impact on crop yield'
        };
      case 'severe':
        return {
          'color': 0xFFF44336, // red
          'icon': 'error',
          'description': 'Severe impact, may destroy entire crop'
        };
      default:
        return {
          'color': 0xFF4CAF50, // green
          'icon': 'info',
          'description': 'Impact level unknown'
        };
    }
  }
}

// This will be generated by Hive
class DiseaseAdapter extends TypeAdapter<Disease> {
  @override
  final int typeId = 5;

  @override
  Disease read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    return Disease(
      id: fields[0] as String,
      name: fields[1] as String,
      scientificName: fields[2] as String,
      cropType: fields[3] as String,
      symptoms: (fields[4] as List).cast<String>(),
      treatments: (fields[5] as List).cast<String>(),
      preventiveMeasures: (fields[6] as List).cast<String>(),
      imageUrl: fields[7] as String,
      severity: fields[8] as String,
      affectedCrops: (fields[9] as List).cast<String>(),
    );
  }

  @override
  void write(BinaryWriter writer, Disease obj) {
    writer
      ..writeByte(10)
      ..writeByte(0)
      ..write(obj.id)
      ..writeByte(1)
      ..write(obj.name)
      ..writeByte(2)
      ..write(obj.scientificName)
      ..writeByte(3)
      ..write(obj.cropType)
      ..writeByte(4)
      ..write(obj.symptoms)
      ..writeByte(5)
      ..write(obj.treatments)
      ..writeByte(6)
      ..write(obj.preventiveMeasures)
      ..writeByte(7)
      ..write(obj.imageUrl)
      ..writeByte(8)
      ..write(obj.severity)
      ..writeByte(9)
      ..write(obj.affectedCrops);
  }

  @override
  int get hashCode => typeId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DiseaseAdapter &&
          runtimeType == other.runtimeType &&
          typeId == other.typeId;
}
